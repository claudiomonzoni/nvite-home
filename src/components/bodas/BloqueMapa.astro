---
interface Props {
  encabezado: string;
  dir: string;
  horario: string;
  lat: number;
  lng: number;
  mapName: string;
  icono:string;
}

const { encabezado, dir, lat, lng, mapName, horario, icono } = Astro.props;
import { Icon } from "astro-icon/components";
import Mapa from "./Mapa.astro";
console.log(horario)
---

<div class="bloqueMapa">
  <!-- <div class="izq">
    <Mapa lat={lat} lng={lng} mapName={mapName} />
  </div> -->
  <div class="der">
    <div class="bandeja">
      <Icon name={icono} size={35} />
      <h3>{encabezado}</h3>
      <address set:html={dir}>
        <svg  viewBox="0 0 29 41" fill="ffffff">
          <path d="M14.5 0C6.48357 0 0 6.4165 0 14.35C0 25.1125 14.5 41 14.5 41C14.5 41 29 25.1125 29 14.35C29 6.4165 22.5164 0 14.5 0ZM14.5 19.475C11.6414 19.475 9.32143 17.179 9.32143 14.35C9.32143 11.521 11.6414 9.225 14.5 9.225C17.3586 9.225 19.6786 11.521 19.6786 14.35C19.6786 17.179 17.3586 19.475 14.5 19.475Z" fill="#864E4E"/>
          </svg>
        </address>
<div id="bandeReloj">
  <hr>
  <Icon name="reloj" size={30} />
</div>
        <time datetime="{horario}">{horario}</time>
        aqui agregar un boton modal
    </div>
  </div>
</div>

<style lang="scss">
  @import "../../estilos/bodas/_variables.scss";
  h3 {
    color: $secundario;
    font-size: clamp(2.5rem, 2.5vw, 3rem);
  }
  [data-icon] {
    color: $acento;
  }

#bandeReloj {
  position: relative;
  text-align: center;
  margin-top: $margen-min;
  hr{
    position: absolute;
    top: 7px;
    width: 100%;
    z-index: -1;
  }
}
time{
  font-family: $encabezados, serif;
  font-size: clamp(1.5rem, 1.5vw, 2rem);
  color: $acento;
}
  .bloqueMapa {
    display: flex;
    position: relative;
    align-items: center;
    .izq {
      flex: 1.3;
      height: auto;
    }
    .der {
      padding: $margen-cel;
      flex: .6;
      display: inherit;
      justify-content: center;
      align-items: center;
    }
    time, address {
      svg{
        width: 15px;
        height: auto;
        vertical-align: middle;
        margin: 10px 3px;
      }
      path {
    
        // filter: invert(1);
        fill: $primario;
      
      }
    }
    @include cel {
      flex-wrap: wrap;
      .izq,
      .der {
        flex: 1 0 100%;
        text-align: center;
      }
      .izq {
        order: 2;
      }
      .der {
        order: 1;
      }
    }
  }
</style>



<script>
  import gsap from "gsap";
  import ScrollTrigger from "gsap/ScrollTrigger";

  const bloqueMapa = gsap.utils.toArray(".bloqueMapa");
  gsap.registerPlugin(ScrollTrigger);

  bloqueMapa.forEach((bMapa : HTMLElement , id) => {
    let mm = gsap.matchMedia();
  

    mm.add("(min-width: 800px)", () => {
      // desktop setup code here...
      const tl = gsap.timeline({
      scrollTrigger: {
          trigger: bMapa as HTMLElement,
          start: "top 100%",
          end: "bottom 60%",
          scrub: true,
        }
    });
      tl.from(bMapa as HTMLElement, {
        ease: "power2.out",
        x: -30,
        opacity: 0,
        delay: 0.3,
      });
      tl.from(bMapa.children , {
        opacity: 0,
        y: -50,
        stagger: 0.5,
      });
    });

    mm.add("(max-width: 799px)", () => {
      const tl = gsap.timeline({
      scrollTrigger: {
          trigger: bMapa as HTMLElement,
          start: "top 95%",
          end: "bottom 70%",
          scrub: true,
        }
    });
      // mobile setup code here...
      tl.from(bMapa as HTMLElement, {
        ease: "power2.out",
        y: -60,
      });
      tl.from(bMapa.children, {
        opacity: 0,
        y: 120,
        delay: -0.3,
        stagger: 0.2,
      });
    });
  });
</script>
