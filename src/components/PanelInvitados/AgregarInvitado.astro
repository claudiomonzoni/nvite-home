---
import { NvitaAuth } from "../../firebase/config";
import Checkbox from "./Checkbox.astro";
import { Usuario, db, eq } from "astro:db";
const usuarioEmail = NvitaAuth.currentUser?.email;
const usuarios = await db
  .select()
  .from(Usuario)
  .where(eq(Usuario.email, usuarioEmail));
// const usuarioId = usuarios[0].id
const { usuarioId } = Astro.props;
// const tipoInvitacion = usuarios[0].tipo
// const ruta = usuarios[0].ruta

///________________________________________________________________________
// import { monitorAuthState } from "../../firebase/authListener";

// const verificarAuth = () => {
//   return new Promise((resolve) => {
//     monitorAuthState(({ authenticated }) => {
//       resolve(authenticated);
//     });
//   });
// };

// verificarAuth().then((authenticated) => {

//   if (!authenticated) {
//     location.reload();
//   return;
//   }
// });
///________________________________________________________________________
---

<dialog id="agrega-invitado-dialog" data-ref={usuarioId}>
  <div class="formulario">
    <h2>Agregar invitado</h2>
    <form id="agregar-formu">
      <label for="nombre"
        >Nombre del invitado

        <input
          type="text"
          name="nombre"
          placeholder="Nombre que aparecerá en la invitación"
          required
        />
      </label>
      <label for="pases"
        >Numero de pases

        <input
          type="number"
          name="pases"
          required
          placeholder="Asignar numero de pases"
        />
      </label>
      <label for="mesa"
        >Numero de mesa

        <input
          type="number"
          name="mesa"
          placeholder="Asignar numero de mesa (opcional)"
        />
      </label>
      <label for="whatsapp"
        >Numero de whatsapp

        <input
          type="tel"
          name="numeroWhats"
          placeholder="Numero de whatsapp del invitado"
        />
      </label>
      <label for="tipoInvitacion">Tipo de invitación</label>
      <select name="tipoInvitacion" id="tipoInvitacion">
        <option value="Familiar">Familiar</option>
        <option value="Individual">Individual</option>
        <option value="Grupal">Grupal</option>
      </select>

      <div id="check">
        <Checkbox
          checked={false}
          inputId={Math.random()}
          name="confirmado"
          titulo="Ya confirmo su asistencia"
        />

        <Checkbox
          checked={false}
          inputId={Math.random()}
          name="vip"
          titulo="Invitado importante"
        />

        <Checkbox
          checked={false}
          inputId={Math.random()}
          name="InvitacionEnviada"
          titulo="Invitación enviada"
        />

        <Checkbox
          checked={false}
          inputId={Math.random()}
          name="noAsiste"
          titulo="No asistirá"
        />
      </div>

      <div
        id="mensaje-vip-container"
        class="mensaje-vip-container"
        style="display: none;"
      >
        <label for="mensajePersonalizado"
          >Mensaje personalizado para invitado VIP</label
        >
        <textarea
          name="mensajePersonalizado"
          placeholder="Escribe un mensaje especial para este invitado VIP"
          rows="3"></textarea>
      </div>

      <input type="submit" value="Agregar invitación" />
    </form>
  </div>
  <a href="#" id="cerrar-dialog">X</a>
</dialog>

<script>
  import sanitize from "sanitize-html";
  const form = document.querySelector(
    "#agrega-invitado-dialog"
  ) as HTMLFormElement;
  const refere = form.dataset.ref;

  // query selectors
  const addForm = document.querySelector("#agregar-formu") as HTMLFormElement;
  const openDialogBtn = document.getElementById(
    "agregar-invitado"
  ) as HTMLButtonElement;
  const closeDialogBtn = document.getElementById(
    "cerrar-dialog"
  ) as HTMLButtonElement;
  const dialog = document.querySelector(
    "#agrega-invitado-dialog"
  ) as HTMLDialogElement;
  const mensajeVipContainer = document.querySelector(
    "#mensaje-vip-container"
  ) as HTMLDivElement;
  const vipCheckbox = document.querySelector(
    "input[name='vip']"
  ) as HTMLInputElement;

  // Mostrar/ocultar campo de mensaje VIP cuando cambia el checkbox
  vipCheckbox?.addEventListener("change", () => {
    if (mensajeVipContainer) {
      mensajeVipContainer.style.display = vipCheckbox.checked
        ? "block"
        : "none";
    }
  });

  // dialog
  openDialogBtn.addEventListener("click", () => dialog.showModal());

  closeDialogBtn.addEventListener("click", () => dialog.close());

  dialog.addEventListener("click", (e) => {
    if (e.target === e.currentTarget) {
      dialog.close();
    }
  });

  // form submit
  addForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    // Validaciones de cliente
    const nombreInput = addForm.querySelector(
      "input[name='nombre']"
    ) as HTMLInputElement;
    const nombre = nombreInput.value.trim();
    if (!nombre) {
      alert("El nombre no puede estar vacío.");
      return;
    }

    const pases = parseInt(
      (addForm.querySelector("input[name='pases']") as HTMLInputElement).value,
      10
    );
    if (isNaN(pases) || pases < 1) {
      alert("El número de pases debe ser un número positivo.");
      return;
    }

    try {
      const formData = new FormData(addForm);
      const ref = formData.get("data-ref");
      const nombre = sanitize(formData.get("nombre") as string);
      const pases = sanitize(formData.get("pases") as string);
      const mesa = sanitize(formData.get("mesa") as string);
      const numeroWhats = sanitize(formData.get("numeroWhats") as string);
      const confirmado = formData?.get("confirmado") === "on" ? true : false;
      const vip = formData?.get("vip") === "on" ? true : false;
      const InvitacionEnviada =
        formData?.get("InvitacionEnviada") === "on" ? true : false;
      const noAsiste = formData?.get("noAsiste") === "on" ? true : false;
      const tipoInvitacion = sanitize(formData.get("tipoInvitacion") as string);
      const mensajePersonalizado = vip
        ? sanitize(formData.get("mensajePersonalizado") as string)
        : null;

      const req = await fetch("/api/addInvitados.json", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          usuarioId: refere,
          nombre,
          pases,
          mesa,
          numeroWhats,
          confirmado,
          vip,
          InvitacionEnviada,
          noAsiste,
          tipoInvitacion,
          mensajePersonalizado,
        }),
      });

      if (!req.ok) {
        location.reload();
        throw new Error(
          "Algo salió mal, se va a recargar la página, por favor vuelve a intentarlo, ingresa de nuevo al panel de invitados."
        );
      }

      const res = await req.json();
      if (res.success) {
        addForm.reset();
        dialog.close();
        location.reload();
      } else {
        throw new Error(res.message);
      }
    } catch (e) {
      if (e instanceof Error) {
        alert(e.message);
      }
    }
  });
</script>

<style lang="scss">
  @use "../../estilos/_variables.scss" as *;
  dialog {
    border: none;
    border-radius: 16px;
    padding: 2.5rem;
    width: 100%;
    max-width: min(90vw, 800px);
    height: max-content;
    max-height: 90vh;
    overflow-y: auto;
    background: linear-gradient(to bottom, #ffffff, #f8f9fa);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);

    &::-webkit-scrollbar {
      width: 8px;
    }

    &::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 4px;
    }

    &::-webkit-scrollbar-thumb {
      background: $acento;
      border-radius: 4px;
    }

    @media (min-width: 768px) {
      padding: 3rem;
    }

    @include cel {
      max-width: 95%;
      padding: 1.5rem;
    }
  }

  .formulario {
    h2 {
      color: $acento;
      font-size: clamp(1.5rem, 3vw, 2rem);
      margin-bottom: 2.5rem;
      position: relative;

      &:after {
        content: "";
        position: absolute;
        bottom: -10px;
        left: 50%;
        transform: translateX(-50%);
        width: clamp(40px, 10%, 80px);
        height: 3px;
        background: $acento;
        border-radius: 2px;
      }
    }
  }

  form {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    width: 100%;
    max-width: 100%;
    margin: 0 auto;

    @media (min-width: 768px) {
      grid-template-columns: repeat(2, 1fr);
      gap: 2rem;
    }

    @include cel {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    label {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      font-weight: 500;
      color: $primario;
      font-size: clamp(0.9rem, 1.5vw, 1rem);

      &[for="tipoInvitacion"] {
        @media (min-width: 768px) {
          grid-column: span 2;
        }
      }
    }
    input {
    padding:0 1rem;
    }
    input[type="submit"] {
    padding:.4rem 1rem;
    }
    select,
    textarea {
      border: 2px solid #e0e0e0;
      border-radius: 8px;
      padding: clamp(0.6rem, 1vw, 1rem);
      font-size: clamp(0.9rem, 1.5vw, 1rem);
      transition: all 0.2s ease;
      background: white;
      width: 100%;

      &:focus {
        border-color: $acento;
        box-shadow: 0 0 0 3px rgba($acento, 0.1);
        outline: none;
      }

      &::placeholder {
        color: #999;
        font-size: clamp(0.85rem, 1.5vw, 0.9rem);
      }
    }

    select {
      appearance: none;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23666' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right 1rem center;
      background-size: 1em;
      padding-right: 2.5rem;

      @media (min-width: 768px) {
        grid-column: span 2;
        max-width: 100%;
      }
    }
  }

  #check {
    grid-column: 1 / -1;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: clamp(1rem, 2vw, 1.5rem);
    padding: clamp(1rem, 2vw, 1.5rem);
    background: #f8f9fa;
    border-radius: 12px;
    margin: 1rem 0;

    @media (min-width: 768px) {
      grid-template-columns: repeat(2, 1fr);
    }

    @include cel {
      grid-template-columns: 1fr;
    }
  }

  .mensaje-vip-container {
    grid-column: 1 / -1;
    background: rgba($secundario, 0.05);
    border: 1px solid rgba($secundario, 0.1);
    border-radius: 12px;
    padding: clamp(1rem, 2vw, 1.5rem);
    margin: 1rem 0;
    transition: all 0.3s ease;

    textarea {
      min-height: clamp(100px, 15vh, 150px);
      resize: vertical;
      margin-top: 0.5rem;
      width: 100%;

      &:focus {
        border-color: $secundario;
        box-shadow: 0 0 0 3px rgba($secundario, 0.1);
      }
    }
  }

  input[type="submit"] {
    grid-column: 1 / -1;
    background: $acento !important;
    color: white;
    font-weight: 600;
    padding: clamp(0.8rem, 2vw, 1.2rem);
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    border: none;
    margin-top: 1rem;
    width: 100%;
    font-size: clamp(1rem, 1.5vw, 1.1rem);

    @media (min-width: 768px) {
      max-width: 300px;
      justify-self: center;
    }

    &:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba($acento, 0.2);
    }

    &:active {
      transform: translateY(0);
    }
  }

  #cerrar-dialog {
    position: absolute;
    top: 1.5rem;
    right: 1.5rem;
    background: white;
    color: $primario;
    width: clamp(32px, 4vw, 40px);
    height: clamp(32px, 4vw, 40px);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    font-weight: 600;
    font-size: clamp(1rem, 1.5vw, 1.2rem);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;

    &:hover {
      background: #f8f9fa;
      transform: rotate(90deg);
    }
  }
</style>
