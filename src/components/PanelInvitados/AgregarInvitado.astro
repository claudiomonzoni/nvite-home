---
import { NvitaAuth } from "../../firebase/config";
import Checkbox from "./Checkbox.astro";
import { Usuario, db, eq } from "astro:db";
const usuarioEmail = NvitaAuth.currentUser?.email;
const usuarios = await db
  .select()
  .from(Usuario)
  .where(eq(Usuario.email, usuarioEmail));
// const usuarioId = usuarios[0].id
const { usuarioId } = Astro.props;
// const tipoInvitacion = usuarios[0].tipo
// const ruta = usuarios[0].ruta

///________________________________________________________________________
// import { monitorAuthState } from "../../firebase/authListener";

// const verificarAuth = () => {
//   return new Promise((resolve) => {
//     monitorAuthState(({ authenticated }) => {
//       resolve(authenticated);
//     });
//   });
// };

// verificarAuth().then((authenticated) => {

//   if (!authenticated) {
//     location.reload();
//   return;
//   }
// });
///________________________________________________________________________
---

<dialog id="agrega-invitado-dialog" data-ref={usuarioId}>
  <div class="formulario">
    <h2>Agrega un invitado a tu panel</h2>
    <form id="agregar-formu">
      <label for="nombre"
        >Nombre del invitado

        <input
          type="text"
          name="nombre"
          placeholder="Nombre que aparecerá en la invitación"
          required
        />
      </label>
      <label for="pases"
        >Numero de pases

        <input
          type="number"
          name="pases"
          required
          placeholder="Asignar numero de pases"
        />
      </label>
      <label for="mesa"
        >Numero de mesa

        <input
          type="number"
          name="mesa"
          placeholder="Asignar numero de mesa (opcional)"
        />
      </label>
      <label for="whatsapp"
        >Numero de whatsapp

        <input
          type="tel"
          name="numeroWhats"
          placeholder="Numero de whatsapp del invitado"
        />
      </label>
      <label for="tipoInvitacion">Tipo de invitación</label>
      <select name="tipoInvitacion" id="tipoInvitacion">
        <option value="Familiar">Familiar</option>
        <option value="Individual">Individual</option>
        <option value="Grupal">Grupal</option>
      </select>

      <div id="check">
        <Checkbox
          checked={false}
          inputId={Math.random()}
          name="confirmado"
          titulo="Ya confirmo su asistencia"
        />

        <Checkbox
          checked={false}
          inputId={Math.random()}
          name="vip"
          titulo="Invitado importante"
        />

        <Checkbox
          checked={false}
          inputId={Math.random()}
          name="InvitacionEnviada"
          titulo="Invitación enviada"
        />

        <Checkbox
          checked={false}
          inputId={Math.random()}
          name="noAsiste"
          titulo="No asistirá"
        />
      </div>

      <div id="mensaje-vip-container" class="mensaje-vip-container" style="display: none;">
        <label for="mensajePersonalizado">Mensaje personalizado para invitado VIP</label>
        <textarea
          name="mensajePersonalizado"
          placeholder="Escribe un mensaje especial para este invitado VIP"
          rows="3"
        ></textarea>
      </div>

      <input type="submit" value="Agregar invitación" />
    </form>
  </div>
  <a href="#" id="cerrar-dialog">X</a>
</dialog>

<script>
  import sanitize from "sanitize-html";
  const form = document.querySelector(
    "#agrega-invitado-dialog"
  ) as HTMLFormElement;
  const refere = form.dataset.ref;

  // query selectors
  const addForm = document.querySelector("#agregar-formu") as HTMLFormElement;
  const openDialogBtn = document.getElementById(
    "agregar-invitado"
  ) as HTMLButtonElement;
  const closeDialogBtn = document.getElementById(
    "cerrar-dialog"
  ) as HTMLButtonElement;
  const dialog = document.querySelector(
    "#agrega-invitado-dialog"
  ) as HTMLDialogElement;
  const mensajeVipContainer = document.querySelector(
    "#mensaje-vip-container"
  ) as HTMLDivElement;
  const vipCheckbox = document.querySelector(
    "input[name='vip']"
  ) as HTMLInputElement;

  // Mostrar/ocultar campo de mensaje VIP cuando cambia el checkbox
  vipCheckbox?.addEventListener("change", () => {
    if (mensajeVipContainer) {
      mensajeVipContainer.style.display = vipCheckbox.checked ? "block" : "none";
    }
  });

  // dialog
  openDialogBtn.addEventListener("click", () => dialog.showModal());

  closeDialogBtn.addEventListener("click", () => dialog.close());

  dialog.addEventListener("click", (e) => {
    if (e.target === e.currentTarget) {
      dialog.close();
    }
  });

  // form submit
  addForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    // Validaciones de cliente
    const nombreInput = addForm.querySelector(
      "input[name='nombre']"
    ) as HTMLInputElement;
    const nombre = nombreInput.value.trim();
    if (!nombre) {
      alert("El nombre no puede estar vacío.");
      return;
    }

    const pases = parseInt(
      (addForm.querySelector("input[name='pases']") as HTMLInputElement).value,
      10
    );
    if (isNaN(pases) || pases < 1) {
      alert("El número de pases debe ser un número positivo.");
      return;
    }

    try {
      const formData = new FormData(addForm);
      const ref = formData.get("data-ref");
      const nombre = sanitize(formData.get("nombre") as string);
      const pases = sanitize(formData.get("pases") as string);
      const mesa = sanitize(formData.get("mesa") as string);
      const numeroWhats = sanitize(formData.get("numeroWhats") as string);
      const confirmado = formData?.get("confirmado") === "on" ? true : false;
      const vip = formData?.get("vip") === "on" ? true : false;
      const InvitacionEnviada =
        formData?.get("InvitacionEnviada") === "on" ? true : false;
      const noAsiste = formData?.get("noAsiste") === "on" ? true : false;
      const tipoInvitacion = sanitize(formData.get("tipoInvitacion") as string);
      const mensajePersonalizado = vip ? sanitize(formData.get("mensajePersonalizado") as string) : null;

      const req = await fetch("/api/addInvitados.json", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          usuarioId: refere,
          nombre,
          pases,
          mesa,
          numeroWhats,
          confirmado,
          vip,
          InvitacionEnviada,
          noAsiste,
          tipoInvitacion,
          mensajePersonalizado,
        }),
      });

      if (!req.ok) {
        location.reload();
        throw new Error(
          "Algo salió mal, se va a recargar la página, por favor vuelve a intentarlo, ingresa de nuevo al panel de invitados."
        );
      }

      const res = await req.json();
      if (res.success) {
        addForm.reset();
        dialog.close();
        location.reload();
      } else {
        throw new Error(res.message);
      }
    } catch (e) {
      if (e instanceof Error) {
        alert(e.message);
      }
    }
  });
</script>

<style lang="scss">
  @use "../../estilos/_variables.scss" as *;
  dialog {
    border: none;
    border-radius: $margen-cel;
    padding: $margen-cel;
    width: 100%;
    max-width: 70%;
    text-align: center;
    @include cel {
      max-width: 90%;
      padding: $margen-min;
      form {
        width: 90%;
      }
    }
    @extend .sombra;
  }
  form {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    width: 70%;
    margin: 0 auto;

    label {
      flex: 1 0 70%;
      text-align: left;
      font-weight: bold;
      color: $acento;
    }
    input,
    select,
    textarea {
      border-radius: 5px;
      width: 100%;
      margin: 0.5rem 0;
      padding: 0.6rem;
    }
  }

  .mensaje-vip-container {
    width: 100%;
    margin: 1rem 0;
    padding: 1rem;
    background-color: #fff3cd;
    border-radius: 5px;
    border: 1px solid #ffeeba;
    
    textarea {
      resize: vertical;
      min-height: 100px;
      width: 100%;
      border: 1px solid #ddd;
      &:focus {
        outline: none;
        border-color: $acento;
      }
    }
  }

  button,
  input[type="submit"] {
    background-color: $acento;
    border-radius: 5px;
    color: #fff;
    border: none;
    display: inline-block;
    text-align: center;
    padding: 0.3rem 0.8rem;
    font-weight: bold;

    svg {
      vertical-align: middle;
      margin-right: 0.2rem;
    }
    @include cel {
      margin-top: 0.5rem;
    }
  }
  #check {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-evenly;
    align-items: center;
    padding: $margen-min;
    gap: 1.5rem;
  }
  #cerrar-dialog {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background-color: $acento;
    border-radius: 100px;
    color: #fff;
    border: none;
    display: inline-block;
    text-align: center;
    padding: 0.5rem 0.8rem;
    font-weight: bold;
    @extend .sombra;
  }
</style>
