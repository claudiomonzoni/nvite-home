---
import Checkbox from "./Checkbox.astro";
---

<dialog id="editar-invitado-dialog">
  <div class="formulario">
    <h2>Editar invitado</h2>
    <form id="editar-formu">
      <label for="nombre">
        Nombre del invitado
        <input
          type="text"
          name="nombre"
          required
          placeholder="Nombre que aparecerá en la invitación"
        />
      </label>
      <label for="pases">
        Número de pases
        <input
          type="number"
          name="pases"
          required
          placeholder="Asignar numero de pases"
        />
      </label>
      <label for="mesa">
        Número de mesa
        <input
          type="number"
          name="mesa"
          placeholder="Asignar numero de mesa (opcional)"
        />
      </label>
      <label for="whatsapp">
        Número de WhatsApp
        <input
          type="tel"
          name="numeroWhats"
          placeholder="Numero de whatsapp del invitado"
        />
      </label>
      <label for="tipoInvitacion">Tipo de invitación</label>
      <select name="tipoInvitacion" id="tipoInvitacion">
        <option value="Familiar">Familiar</option>
        <option value="Individual">Individual</option>
        <option value="Grupal">Grupal</option>
      </select>

      <div class="check">
        <Checkbox
          checked={false}
          inputId={Math.random()}
          name="confirmado"
          titulo="¿Ya confirmo sus asistencia?"
        />

        <Checkbox
          checked={false}
          inputId={Math.random()}
          titulo="Invitado importante"
          name="vip"
        />

        <Checkbox
          checked={false}
          inputId={Math.random()}
          titulo="Invitación enviada"
          name="InvitacionEnviada"
        />

        <Checkbox
          checked={false}
          inputId={Math.random()}
          titulo="No asistirá"
          name="noAsiste"
        />
      </div>

      <div
        id="mensaje-vip-container"
        class="mensaje-vip-container"
        style="display: none;"
      >
        <label for="mensajePersonalizado"
          >Mensaje personalizado para invitado VIP</label
        >
        <textarea
          name="mensajePersonalizado"
          placeholder="Escribe un mensaje especial para este invitado VIP"
          rows="3"></textarea>
      </div>

      <input type="submit" value="Editar invitado" />
    </form>
  </div>
  <a href="#" id="cerrar-dialog-editar">X</a>
</dialog>

<style lang="scss">
  @use "../../estilos/_variables.scss" as *;
  dialog {
    border: none;
    border-radius: 16px;
    padding: 2.5rem;
    width: 100%;
    max-width: min(90vw, 800px);
    height: max-content;
    max-height: 90vh;
    overflow-y: auto;
    background: linear-gradient(to bottom, #ffffff, #f8f9fa);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);

    &::-webkit-scrollbar {
      width: 8px;
    }

    &::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 4px;
    }

    &::-webkit-scrollbar-thumb {
      background: $acento;
      border-radius: 4px;
    }

    @media (min-width: 768px) {
      padding: 3rem;
    }

    @include cel {
      max-width: 95%;
      padding: 1.5rem;
    }
  }

  .formulario {
    position: relative;

    h2 {
      color: $acento;
      font-size: clamp(1.5rem, 3vw, 2rem);
      margin-bottom: 2.5rem;
      position: relative;

      &:after {
        content: "";
        position: absolute;
        bottom: -10px;
        left: 50%;
        transform: translateX(-50%);
        width: clamp(40px, 10%, 80px);
        height: 3px;
        background: $acento;
        border-radius: 2px;
      }
    }
  }
  form {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    width: 100%;
    max-width: 100%;
    margin: 0 auto;

    @media (min-width: 768px) {
      grid-template-columns: repeat(2, 1fr);
      gap: 2rem;
    }

    @include cel {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    label {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      font-weight: 500;
      color: $primario;
      font-size: clamp(0.9rem, 1.5vw, 1rem);

      &[for="tipoInvitacion"] {
        @media (min-width: 768px) {
          grid-column: span 2;
        }
      }
    }

    input {
    padding:0 1rem;
    }
    input[type="submit"] {
    padding:.4rem 1rem;
    }
    select,
    textarea {
      border: 2px solid #e0e0e0;
      border-radius: 8px;
      padding: clamp(0.6rem, 1vw, 1rem);
      font-size: clamp(0.9rem, 1.5vw, 1rem);
      transition: all 0.2s ease;
      background: white;
      width: 100%;

      &:focus {
        border-color: $acento;
        box-shadow: 0 0 0 3px rgba($acento, 0.1);
        outline: none;
      }

      &::placeholder {
        color: #999;
        font-size: clamp(0.85rem, 1.5vw, 0.9rem);
      }
    }

    select {
      appearance: none;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23666' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right 1rem center;
      background-size: 1em;
      padding-right: 2.5rem;

      @media (min-width: 768px) {
        grid-column: span 2;
        max-width: 100%;
      }
    }
  }

  .check {
    grid-column: 1 / -1;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: clamp(1rem, 2vw, 1.5rem);
    padding: clamp(1rem, 2vw, 1.5rem);
    background: #f8f9fa;
    border-radius: 12px;
    margin: 1rem 0;

    @media (min-width: 768px) {
      grid-template-columns: repeat(2, 1fr);
    }

    @include cel {
      grid-template-columns: 1fr;
    }
  }

  .mensaje-vip-container {
    grid-column: 1 / -1;
    background: rgba($primario, 0.9);
    border-radius: 12px;
    padding: clamp(1rem, 2vw, 1.5rem);
    transition: all 0.3s ease;

    textarea {
      min-height: clamp(100px, 15vh, 150px);
      resize: vertical;
      margin-top: 0.5rem;
      width: 100%;

      &:focus {
        border-color: $secundario;
        box-shadow: 0 0 0 3px rgba($secundario, 0.1);
      }
    }

    label {
      color: white;
      font-weight: 600;
      padding: 0;
    }
  }
  input[type="submit"] {
    grid-column: 1 / -1;
    background: $acento !important;
    color: white;
    font-weight: 600;
    padding: clamp(0.8rem, 2vw, 1.2rem);
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    border: none;
    margin-top: 1rem;
    width: 100%;
    font-size: clamp(1rem, 1.5vw, 1.1rem);

    @media (min-width: 768px) {
      max-width: 300px;
      justify-self: center;
    }

    &:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba($acento, 0.2);
    }

    &:active {
      transform: translateY(0);
    }
  }

  #cerrar-dialog-editar {
    position: absolute;
    top: 1.5rem;
    right: 1.5rem;
    background: white;
    color: $primario;
    width: clamp(32px, 4vw, 40px);
    height: clamp(32px, 4vw, 40px);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    font-weight: 600;
    font-size: clamp(1rem, 1.5vw, 1.2rem);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
    z-index: 1;

    &:hover {
      background: #f8f9fa;
      transform: rotate(90deg);
    }
  }
</style>

<script>
  import sanitize from "sanitize-html";

  // Función para obtener los datos del invitado
  const getInvitadoData = async (id, uid) => {
    const baseURL = window.location.origin;
    const response = await fetch(
      `${baseURL}/api/getInvitado.json?id=${id}&uid=${uid}`
    );
    const idInvitacion = await response.json();
    return idInvitacion;
  };

  const dialoged = document.querySelector(
    "#editar-invitado-dialog"
  ) as HTMLFormElement;

  // query selectors
  const addFormEdit = document.querySelector(
    "#editar-formu"
  ) as HTMLFormElement;
  const dialogeditar = document.querySelector(
    "#editar-invitado-dialog"
  ) as HTMLDialogElement;
  const mensajeVipContainer = document.querySelector(
    "#mensaje-vip-container"
  ) as HTMLDivElement;
  const vipCheckbox = document.querySelector(
    "input[name='vip']"
  ) as HTMLInputElement;

  // Mostrar/ocultar campo de mensaje VIP cuando cambia el checkbox
  vipCheckbox?.addEventListener("change", () => {
    if (mensajeVipContainer) {
      mensajeVipContainer.style.display = vipCheckbox.checked
        ? "block"
        : "none";
    }
  });

  // form submit
  addFormEdit.addEventListener("submit", async (e) => {
    e.preventDefault();

    const nombreInput = addFormEdit.querySelector(
      "input[name='nombre']"
    ) as HTMLInputElement;
    const nombre = nombreInput.value.trim();

    if (!nombre) {
      alert("El nombre no puede estar vacío.");
      return;
    }

    const pases = parseInt(
      (addFormEdit.querySelector("input[name='pases']") as HTMLInputElement)
        .value,
      10
    );

    if (isNaN(pases) || pases < 0) {
      alert("El número de pases debe ser un número positivo.");
      return;
    }

    const refere = dialoged.dataset.refedit;

    try {
      const formData = new FormData(addFormEdit);
      const requestBody = {
        usuarioId: refere,
        nombre: sanitize(formData.get("nombre") as string),
        pases: sanitize(formData.get("pases") as string),
        mesa: sanitize(formData.get("mesa") as string),
        numeroWhats: sanitize(formData.get("numeroWhats") as string),
        confirmado: formData.get("confirmado") === "on",
        vip: formData.get("vip") === "on",
        mensajePersonalizado:
          formData.get("vip") === "on"
            ? sanitize(formData.get("mensajePersonalizado") as string)
            : null,
        InvitacionEnviada: formData.get("InvitacionEnviada") === "on",
        noAsiste: formData.get("noAsiste") === "on",
        tipoInvitacion: sanitize(formData.get("tipoInvitacion") as string),
      };

      const request = await fetch(`/api/${refere}.json`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestBody),
      });

      if (!request.ok) {
        const errorText = await request.text();
        throw new Error(
          `Error en la solicitud: ${request.status} ${request.statusText}. Respuesta: ${errorText}`
        );
      }

      let res;
      try {
        res = await request.json();
      } catch (err) {
        throw new Error("La respuesta del servidor no es JSON válido.");
      }

      if (res.success) {
        addFormEdit.reset();
        dialogeditar.close();
        location.reload();
      } else {
        throw new Error(res.message || "Ocurrió un error desconocido.");
      }
    } catch (e) {
      console.error("Error en la solicitud:", e);
      alert(e.message);
    }
  });

  const dialogEditar = document.querySelector(
    "#editar-invitado-dialog"
  ) as HTMLDialogElement;
  const closeDialogBtn = document.getElementById(
    "cerrar-dialog-editar"
  ) as HTMLButtonElement;
  closeDialogBtn.addEventListener("click", () => dialogEditar.close());

  // Función para llenar el formulario con los datos del invitado
  const llenar = (dialogo, id, uid) => {
    const nombreInput = dialogo.querySelector(
      "input[name='nombre']"
    ) as HTMLInputElement;
    const pasesInput = dialogo.querySelector(
      "input[name='pases']"
    ) as HTMLInputElement;
    const mesaInput = dialogo.querySelector(
      "input[name='mesa']"
    ) as HTMLInputElement;
    const numeroWhatsInput = dialogo.querySelector(
      "input[name='numeroWhats']"
    ) as HTMLInputElement;
    const confirmadoCheckbox = dialogo.querySelector(
      "input[name='confirmado']"
    ) as HTMLInputElement;
    const vipCheckbox = dialogo.querySelector(
      "input[name='vip']"
    ) as HTMLInputElement;
    const invitacionEnviadaCheckbox = dialogo.querySelector(
      "input[name='InvitacionEnviada']"
    ) as HTMLInputElement;
    const noAsisteCheckbox = dialogo.querySelector(
      "input[name='noAsiste']"
    ) as HTMLInputElement;
    const mensajePersonalizadoTextarea = dialogo.querySelector(
      "textarea[name='mensajePersonalizado']"
    ) as HTMLTextAreaElement;

    const invitadoDataPromise = getInvitadoData(id, uid);
    invitadoDataPromise.then((invitadoData) => {
      if (invitadoData && invitadoData[0]) {
        dialogo.dataset.refedit = invitadoData[0].id;
        nombreInput.value = invitadoData[0].nombre;
        pasesInput.value = invitadoData[0].pases;
        mesaInput.value = invitadoData[0].mesa?.toString() || "";
        numeroWhatsInput.value = invitadoData[0].numeroWhats?.toString() || "";
        confirmadoCheckbox.checked = invitadoData[0].confirmado;
        vipCheckbox.checked = invitadoData[0].vip;
        invitacionEnviadaCheckbox.checked = invitadoData[0].InvitacionEnviada;
        noAsisteCheckbox.checked = invitadoData[0].noAsiste;

        if (mensajePersonalizadoTextarea) {
          mensajePersonalizadoTextarea.value =
            invitadoData[0].mensajePersonalizado || "";
          // Mostrar/ocultar el contenedor de mensaje VIP según el estado del checkbox
          if (mensajeVipContainer) {
            mensajeVipContainer.style.display = invitadoData[0].vip
              ? "block"
              : "none";
          }
        }
      }
    });
  };
  // Asegurarse de que la función llenar esté disponible globalmente
  (window as any).llenar = llenar;
</script>
