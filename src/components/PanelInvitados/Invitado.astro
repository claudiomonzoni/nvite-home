---
import { Icon } from "astro-icon/components";

export type InvitadoProps = {
  id: number;
  uuid: string;
  usuarioId: number;
  nombre: string;
  pases: string;
  mesa: number;
  numeroWhats: number;
  confirmado: boolean;
  vip: boolean;
  InvitacionEnviada: boolean;
  noAsiste: boolean;
  tipoInvitacion: string;
  mensajePersonalizado?: string;
};

type Props = { invitadoData: InvitadoProps; ruta: string; tipo: string };
const { invitadoData, ruta, tipo } = Astro.props;
const urlWA: string = `${Astro.url.origin}/${tipo}/${ruta}?id=${invitadoData.id}%26uid=${invitadoData.usuarioId}`;
---

<article
  class=`invitado-card ${invitadoData.confirmado ? "confirmado" : ""} ${invitadoData.noAsiste ? "NoAsiste" : ""} ${invitadoData.InvitacionEnviada ? "enviada" : ""}`
>  <div class="status-indicator">
    {
      invitadoData.confirmado ? (
        <Icon name="mdi:check-circle" size={24} title="Confirmado" />
      ) : invitadoData.noAsiste ? (
        <Icon name="mdi:calendar-remove" size={24} title="No asiste" />
      ) : invitadoData.InvitacionEnviada ? (
        <Icon name="mdi:send" size={24} title="Invitación enviada" />
      ) : (
        <Icon name="mdi:send-outline" size={24} title="Invitación no enviada" />
      )
    }
  </div>

  <div class="invitado-header">
    <h2>
      {invitadoData.nombre}
      {
        invitadoData.vip && (
          <Icon name="mdi:crown" size={20} class="vip-icon" title="Invitado VIP" />
        )
      }
    </h2>
  </div>

  <div class="invitado-content">
    <div class="info-section">
      <div class="info-primary">
        <p class="info-item">
          <Icon name="mdi:ticket" size={20} />
          <span>{Math.round(parseFloat(invitadoData.pases))} pases</span>
        </p>
        {
          invitadoData.mesa && (
            <p class="info-item">
              <Icon name="mdi:table-furniture" size={20} />
              <span>Mesa {invitadoData.mesa}</span>
            </p>
          )
        }
      </div>

      <div class="status-section">
        {
          invitadoData.numeroWhats ? (
            <p class="info-item">
              <Icon name="mdi:whatsapp" size={20} />
              <span>{invitadoData.numeroWhats}</span>
            </p>
          ) : (
            <p class="info-item warning">
              <Icon name="mdi:whatsapp" size={20} />
              <span>Sin WhatsApp</span>
            </p>
          )
        }

        <div class="status-indicators">
          {
            invitadoData.confirmado && (
              <span class="status-tag confirmed">Confirmado</span>
            )
          }
          {
            invitadoData.noAsiste && (
              <span class="status-tag no-asiste">No asiste</span>
            )
          }
          {
            invitadoData.InvitacionEnviada && (
              <span class="status-tag sent">Enviada</span>
            )
          }
          <span class="status-tag type">{invitadoData.tipoInvitacion}</span>
        </div>
      </div>
    </div>

    <div class="actions-section">
      <div class="edit-actions">
        <button
          class="btn-icon"
          data-edit
          data-id={invitadoData.uuid}
          data-uid={invitadoData.usuarioId}
        >
          <Icon name="mdi:account-edit-outline" size={20} />
          <span>Editar</span>
        </button>
        <button class="btn-icon delete" data-delete data-id={invitadoData.uuid}>
          <Icon name="borrar" size={20} />
          <span>Borrar</span>
        </button>
      </div>

      <div class="share-actions">
        {
          invitadoData.numeroWhats && (
            <a
              href="#"
              class="btn-action whatsapp"
              id="enviarwa"
              data-wa={invitadoData.numeroWhats}
              data-copiarwa={urlWA}
            >
              <span>Enviar: </span>
              <Icon name="mdi:whatsapp" size={20} />
            </a>
          )
        }
        <a
          href="#"
          class="btn-action copy"
          id="copiar"
          data-copiar={`${Astro.url.origin}/${tipo}/${ruta}?id=${invitadoData.uuid}&uid=${invitadoData.usuarioId}`}
        >
          <Icon name="mdi:content-copy" size={20} />
          <span>Copiar enlace</span>
        </a>
      </div>
    </div>
  </div>
</article>

<script>
  //botones de control para compiar y enviar a whatsapp la invitación en el panel
  const copiarBtnes = document.querySelectorAll(
    "#copiar"
  ) as NodeListOf<HTMLAnchorElement>;

  copiarBtnes.forEach((btn) => {
    btn.addEventListener("click", (e) => {
      e.preventDefault();
      const copyValue = btn.getAttribute("data-copiar");
      if (copyValue) {
        navigator.clipboard.writeText(copyValue).then(
          () => {
            alert("Texto copiado al portapapeles: " + copyValue);
          },
          (err) => {
            console.error("Error al copiar el texto: ", err);
          }
        );
      }
    });
  });

  //logica para enviar la invitación por whatsapp
  const ua = navigator.userAgent;

  const enviarwaBtnes = document.querySelectorAll(
    "#enviarwa"
  ) as NodeListOf<HTMLAnchorElement>;
  enviarwaBtnes.forEach((btn) => {
    const numeroWhats = btn.dataset.wa;
    const invitacion = btn.dataset.copiarwa;
    const invitaciontxt = `Hola,%20te%20entrego%20una%20invitación,%20para%20mi%20evento%20por%20favor%20ingresa%20al%0aenlace:%20${invitacion}%20confirma%20tu%20asistencia.`;
    if (!numeroWhats) {
      btn.closest(".control").querySelector("h4").style.display = "none";
      btn.style.display = "none";
    }

    let whats = "";
    if (/Mobile/i.test(ua)) {
      whats = `https://api.whatsapp.com/send/?phone=${numeroWhats}&text=${invitacion}`;
    } else {
      whats = `https://web.whatsapp.com/send/?phone=${numeroWhats}&text=${invitacion}`;
    }

    const url = `${whats}`;
    btn.href = url;
  });

  // btn borrar
  const deleteBtns = document.querySelectorAll(
    "[data-delete]"
  ) as NodeListOf<HTMLButtonElement>;
  // btn editar
  const editBtns = document.querySelectorAll(
    "[data-edit]"
  ) as NodeListOf<HTMLButtonElement>;

  deleteBtns.forEach((btn) => {
    btn.addEventListener("click", async () => {
      const id = btn.dataset.id;
      try {
        if (!id) {
          throw new Error("No id present");
        }
        if (window.confirm("¿Quieres borrar la invitación?")) {
          const req = await fetch(`/api/${id}.json`, {
            method: "DELETE",
          });

          if (!req.ok) {
            throw new Error("Error al borrar invitado");
          }
        } else {
          return;
        }

        console.log("borrado");
        btn.closest("article")?.remove();
      } catch (e) {
        console.log(e);
      }
    });
  });

  editBtns.forEach((btn) => {
    btn.addEventListener("click", () => {
      const id = btn.dataset.id;
      const uid = btn.dataset.uid;
      const ediataDialog = document.querySelector(
        "#editar-invitado-dialog"
      ) as HTMLDialogElement;

      // Configurar el evento change del checkbox VIP
      const vipCheckbox = ediataDialog.querySelector(
        "input[name='vip']"
      ) as HTMLInputElement;
      const mensajeVipContainer = ediataDialog.querySelector(
        "#mensaje-vip-container"
      ) as HTMLDivElement;

      if (vipCheckbox && mensajeVipContainer) {
        vipCheckbox.addEventListener("change", () => {
          mensajeVipContainer.style.display = vipCheckbox.checked
            ? "block"
            : "none";
        });
      }

      llenar(ediataDialog, id, uid);
      ediataDialog.showModal();
      ediataDialog.addEventListener("click", (e) => {
        if (e.target === e.currentTarget) {
          ediataDialog.close();
        }
      });
    });

    //funcion de llenado
    const getInvitadoData = async (id, uid) => {
      const baseURL = window.location.origin;
      const response = await fetch(
        `${baseURL}/api/getInvitado.json?id=${id}&uid=${uid}`
      );
      // const idfetch = await fetch(`http://localhost:4321/api/getInvitado.json?id=${id}&uid=${uid}`);
      const idInvitacion = await response.json();
      return idInvitacion;
    };

    const llenar = (dialogo, id, uid) => {
      const nombreInput = dialogo.querySelector(
        "input[name='nombre']"
      ) as HTMLInputElement;
      const pasesInput = dialogo.querySelector(
        "input[name='pases']"
      ) as HTMLInputElement;
      const mesaInput = dialogo.querySelector(
        "input[name='mesa']"
      ) as HTMLInputElement;
      const numeroWhatsInput = dialogo.querySelector(
        "input[name='numeroWhats']"
      ) as HTMLInputElement;
      const confirmadoCheckbox = dialogo.querySelector(
        "input[name='confirmado']"
      ) as HTMLInputElement;
      const vipCheckbox = dialogo.querySelector(
        "input[name='vip']"
      ) as HTMLInputElement;
      const invitacionEnviadaCheckbox = dialogo.querySelector(
        "input[name='InvitacionEnviada']"
      ) as HTMLInputElement;
      const noAsisteCheckbox = dialogo.querySelector(
        "input[name='noAsiste']"
      ) as HTMLInputElement;
      const mensajePersonalizadoTextarea = dialogo.querySelector(
        "textarea[name='mensajePersonalizado']"
      ) as HTMLTextAreaElement;
      const mensajeVipContainer = dialogo.querySelector(
        "#mensaje-vip-container"
      ) as HTMLDivElement;

      const invitadoDataPromise = getInvitadoData(id, uid);
      invitadoDataPromise.then((invitadoData) => {
        console.log(invitadoData[0].nombre);
        if (invitadoData) {
          dialogo.dataset.refedit = invitadoData[0].id;
          nombreInput.value = invitadoData[0].nombre;
          pasesInput.value = invitadoData[0].pases;
          mesaInput.value = invitadoData[0].mesa?.toString() || "";
          numeroWhatsInput.value =
            invitadoData[0].numeroWhats?.toString() || "";
          confirmadoCheckbox.checked = invitadoData[0].confirmado;
          vipCheckbox.checked = invitadoData[0].vip;
          invitacionEnviadaCheckbox.checked = invitadoData[0].InvitacionEnviada;
          noAsisteCheckbox.checked = invitadoData[0].noAsiste;

          if (mensajePersonalizadoTextarea) {
            mensajePersonalizadoTextarea.value =
              invitadoData[0].mensajePersonalizado || "";
            // Mostrar/ocultar el contenedor de mensaje VIP según el estado del checkbox
            if (mensajeVipContainer) {
              mensajeVipContainer.style.display = invitadoData[0].vip
                ? "block"
                : "none";
            }
          }
        }
      });
    };
  });
</script>

<style lang="scss">
  @use "../../estilos/_variables.scss" as *;

  .invitado-card {
    background: #fff;
    border-radius: $radio;
    padding: 1.5rem;
    color: $primario;
    transition: all 0.2s ease;
    position: relative;
    @extend .sombra;

    &:hover {
      transform: translateY(-2px);
    }

    &.enviada {
      background-color: #edf8fd;
      color: #4b7c91;
      h2 {
        color: $primario;
      }
    }

    &.confirmado {
      background-color: rgba($fondo,  .8);
      color: #4b7c91;
      h2 {
        color: $acento;
      }
    }

    &.NoAsiste {
      background-color: #c6bfb5;
      color: #4a443b;
      h2 {
        color: #e3e3e3;
      }
      .info-section {
        background-color: #687378;
       
      }
    }
  }

  .status-indicator {
    position: absolute;
    top: -12px;
    right: -12px;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: white;
    display: flex;
    align-items: center;
    justify-content: center;
    @extend .sombra;
    z-index: 1;
    transition: all 0.3s ease;
    cursor: help;

    svg {
      transition: all 0.3s ease;
      filter: drop-shadow(0 2px 4px rgba(0,0,0,0.1));
    }

    &:hover {
      transform: scale(1.1);
    }
  }

  .invitado-card.enviada .status-indicator {
    background-color: rgba($acento, 0.1);
    svg {
      color: $acento;
    }
  }

  .invitado-card.confirmado .status-indicator {
    background-color: rgba(#4CAF50, 0.1);
    svg {
      color: #4CAF50;
    }
  }

  .invitado-card.NoAsiste .status-indicator {
    background-color: rgba(#f44336, 0.1);
    svg {
      color: #f44336;
    }
  }

  .invitado-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 1.25rem;

    h2 {
      color: $acento;
      font-size: clamp(1.4rem, 1.5vw, 1.8rem);
      margin: 0;
      display: flex;
      align-items: center;
      gap: 0.5rem;

      .vip-icon {
        color: $acento;
        filter: drop-shadow(0 2px 2px rgba(0, 0, 0, 0.1));
      }
    }
  }

  .invitado-content {
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
  }

  .info-section {
    background-color: $primario;
    border-radius: 12px;
    padding: 1.25rem;
    color: #fff;
  }

  .info-primary {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 1rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    
  }

  .info-item {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    margin: 0;
     color: white;

    &.warning {
      color: #ffd700;
    }

    svg {
      opacity: 0.8;
    }
  }

  .status-section {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .status-indicators {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .status-tag {
    font-size: 0.85rem;
    padding: 0.35rem 0.75rem;
    border-radius: 1rem;
    background: rgba(255, 255, 255, 0.1);

    &.confirmed {
      background: rgba(#4caf50, 0.2);
    }
    &.no-asiste {
      background: rgba(#f44336, 0.2);
    }
    &.sent {
      background: rgba(#2196f3, 0.2);
    }
    &.type {
      background: rgba(255, 255, 255, 0.15);
    }
  }

  .actions-section {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .edit-actions {
    display: flex;
    gap: 0.75rem;

    @include cel {
      flex-direction: column;
    }
  }

  .share-actions {
    display: flex;
    gap: 0.75rem;

    @include cel {
      flex-direction: column;
    }
  }

  .btn-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.6rem 1.2rem;
    border-radius: 8px;
    border: 1px solid rgba($acento , 0.6);
    color: $acento;
    background: none!important;
    font-weight: 600;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s ease;
    
    &:hover {
      transform: translateY(-1px);
      filter: brightness(1.1);
    }
    
    &.delete {
      border: 1px solid $acento;

    }
  }

  .btn-action {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.75rem 1.25rem;
    border-radius: 8px;
    background-color: #fff;
    color: $primario;
    text-decoration: none;
    font-weight: 600;
    font-size: 0.9rem;
    flex: 1;
    transition: all 0.2s ease;
    @extend .sombra;

    &:hover {
      transform: translateY(-1px);
    }

    &.whatsapp {
      background-color: rgb(43, 175, 91);
      color: #fff;
    }

    &.copy {
      background-color: #f8f9fa;
    }
  }

  @include cel {
    .invitado-card {
      padding: 1rem;
    }

    .info-primary {
      flex-direction: column;
      gap: 0.75rem;
    }
  }
</style>
