---
import { Icon } from "astro-icon/components";

export type InvitadoProps = {
  id: number;
  usuarioId: number;
  nombre: string;
  pases: string;
  mesa: number;
  numeroWhats: number;
  confirmado: boolean;
  vip: boolean;
  InvitacionEnviada: boolean;
  noAsiste: boolean;
  tipoInvitacion: string;
};

type Props = { invitadoData: InvitadoProps; ruta: string; tipo: string };
const { invitadoData, ruta, tipo } = Astro.props;
---
<article>
  <div class="invitado" >
    <h3>
      {invitadoData.nombre} 
    </h3>
    <div class="relevantes">
      <ul>
        <li>Pases asignados: {invitadoData.pases}</li>
        {
          invitadoData.mesa ? (
            <li>No. de mesa asignada: {invitadoData.mesa}</li>
          ) : (
            ""
          )
        }
        <li>
          <button
          data-edit
          data-id={invitadoData.id}
          data-uid={invitadoData.usuarioId}
          ><Icon name="mdi:account-edit-outline" size={20} />editar</button
        >
        <button data-delete data-id={invitadoData.id}
        ><Icon name="borrar" size={20} />borrar</button
      >
        </li>
      </ul>
    </div>
    <ul>
      {invitadoData.vip ? <li>Invitado Importante</li> : ""}
      {
        invitadoData.numeroWhats ? (
          <li>Whatsapp: {invitadoData.numeroWhats}</li>
        ) : (
          <li>Agregar numero de Whatsapp</li>
        )
      }
      {invitadoData.confirmado ? <li>Confirmada su asistencia</li> : ""}
      {invitadoData.noAsiste ? <li>Confirmo que no asiste</li> : ""}
      {invitadoData.InvitacionEnviada ? <li>Invitacion Enviada</li> : ""}
      <li>Invitación <b> {invitadoData.tipoInvitacion} </b></li>
    </ul>
   
  </div>
  <div class="control">
    <a href="#" id="enviarwa" data-wa={invitadoData.numeroWhats} data-copiarwa={`${Astro.url.origin}/${tipo}${ruta}?id=${invitadoData.id}&uid=${invitadoData.usuarioId}`}><Icon name="mdi:whatsapp" size={20} /> Enviar invitación</a>
    <a
      href="#"
      id="copiar"
      data-copiar={`${Astro.url.origin}/${tipo}${ruta}?id=${invitadoData.id}&uid=${invitadoData.usuarioId}`}
      ><Icon name="mdi:content-copy" size={20} />Copiar invitación</a
    >
  </div>
</article>



<script>
  //botones de control para compiar y enviar a whatsapp la invitación en el panel
  const copiarBtnes = document.querySelectorAll(
    "#copiar"
  ) as NodeListOf<HTMLAnchorElement>;

  copiarBtnes.forEach((btn) => {
    btn.addEventListener("click", (e) => {
      e.preventDefault();
      const copyValue = btn.getAttribute("data-copiar");
      if (copyValue) {
        navigator.clipboard.writeText(copyValue).then(
          () => {
            alert("Texto copiado al portapapeles: " + copyValue);
          },
          (err) => {
            console.error("Error al copiar el texto: ", err);
          }
        );
      }
    });
  });

  //logica para enviar la invitación por whatsapp
  const ua = navigator.userAgent;

  const enviarwaBtnes = document.querySelectorAll(
    "#enviarwa"
  ) as NodeListOf<HTMLAnchorElement>;
  enviarwaBtnes.forEach((btn) => {
    const numeroWhats = btn.dataset.wa;
    const invitacion = btn.dataset.copiarwa;
    if (!numeroWhats) {
      btn.closest(".control").querySelector("h4").style.display = "none";
      btn.style.display = "none";
    }

    let whats = "";
    if (/Mobile/i.test(ua)) {
      whats = `https://api.whatsapp.com/send/?phone=${numeroWhats}&text=${invitacion}`;
    } else {
      whats = `https://web.whatsapp.com/send/?phone=${numeroWhats}&text=${invitacion}`;
    }

    const url = `${whats}`;
    btn.href = url;
  });

  // btn borrar
  const deleteBtns = document.querySelectorAll(
    "[data-delete]"
  ) as NodeListOf<HTMLButtonElement>;
  // btn editar
  const editBtns = document.querySelectorAll(
    "[data-edit]"
  ) as NodeListOf<HTMLButtonElement>;

  deleteBtns.forEach((btn) => {
    btn.addEventListener("click", async () => {
      const id = btn.dataset.id;
      try {
        if (!id) {
          throw new Error("No id present");
        }
        const req = await fetch(`/api/${id}.json`, {
          method: "DELETE",
        });

        if (!req.ok) {
          throw new Error("Error al borrar invitado");
        }

        console.log("borrado");
        btn.closest("article")?.remove();
      } catch (e) {
        console.log(e);
      }
    });
  });

  editBtns.forEach((btn) => {
    btn.addEventListener("click", () => {
      const id = btn.dataset.id;
      const uid = btn.dataset.uid;
      const ediataDialog = document.querySelector(
        "#editar-invitado-dialog"
      ) as HTMLDialogElement;
      llenar(ediataDialog, id, uid);

      ediataDialog.showModal();
      ediataDialog.addEventListener("click", (e) => {
        if (e.target === e.currentTarget) {
          ediataDialog.close();
        }
      });
    });

    //funcion de llenado
    const getInvitadoData = async (id, uid) => {
      const baseURL = window.location.origin;
      const response = await fetch(
        `${baseURL}/api/getInvitado.json?id=${id}&uid=${uid}`
      );
      // const idfetch = await fetch(`http://localhost:4321/api/getInvitado.json?id=${id}&uid=${uid}`);
      const idInvitacion = await response.json();
      return idInvitacion;
    };

    const llenar = (dialogo, id, uid) => {
      const nombreInput = dialogo.querySelector(
        "input[name='nombre']"
      ) as HTMLInputElement;
      const pasesInput = dialogo.querySelector(
        "input[name='pases']"
      ) as HTMLInputElement;
      const mesaInput = dialogo.querySelector(
        "input[name='mesa']"
      ) as HTMLInputElement;
      const numeroWhatsInput = dialogo.querySelector(
        "input[name='numeroWhats']"
      ) as HTMLInputElement;
      const confirmadoCheckbox = dialogo.querySelector(
        "input[name='confirmado']"
      ) as HTMLInputElement;
      const vipCheckbox = dialogo.querySelector(
        "input[name='vip']"
      ) as HTMLInputElement;
      const invitacionEnviadaCheckbox = dialogo.querySelector(
        "input[name='InvitacionEnviada']"
      ) as HTMLInputElement;
      const noAsisteCheckbox = dialogo.querySelector(
        "input[name='noAsiste']"
      ) as HTMLInputElement;

      const invitadoDataPromise = getInvitadoData(id, uid);
      invitadoDataPromise.then((invitadoData) => {
        console.log(invitadoData[0].nombre);
        if (invitadoData) {
          dialogo.dataset.refedit = invitadoData[0].id;
          nombreInput.value = invitadoData[0].nombre;
          pasesInput.value = invitadoData[0].pases;
          mesaInput.value = invitadoData[0].mesa.toString();
          numeroWhatsInput.value = invitadoData[0].numeroWhats.toString();
          confirmadoCheckbox.checked = invitadoData[0].confirmado;
          vipCheckbox.checked = invitadoData[0].vip;
          invitacionEnviadaCheckbox.checked = invitadoData[0].InvitacionEnviada;
          noAsisteCheckbox.checked = invitadoData[0].noAsiste;
        }
      });
    };
  });
</script>

<style lang="scss">
  @import "../../estilos/_variables.scss";
  article {
    background: #fff;
    border-radius: 15px;
    padding: $margen-cel;
    color: $primario;
    @extend .sombra;
    h3 {
      color: $acento;
    }
    .relevantes {
      background-color: $primario;
      border-radius: 20px;
      color: #fff;
      ul {
        padding: 15px;
        display: flex;
        justify-content: space-between;
        li {
          list-style: none;
        }
      }
    }
    ul {
      display: flex;
      flex-wrap: wrap;
    }
  }
</style>
