---
import Btn from '../Btn.astro';
import Boton from './Boton.astro';

interface Props {
    porcentajeMostrarInvitados: number;
    mostrarSiempre: boolean;
    frase: string;
    email: string;
}

const { porcentajeMostrarInvitados, mostrarSiempre, frase, email } = Astro.props;
---

<div id="progreso-invitados" class="progreso-invitados" data-email={email} data-porcentaje-minimo={porcentajeMostrarInvitados} data-mostrar-siempre={mostrarSiempre} data-frase={frase}>
    <div class="contenido">
        <h2 id="frase-titulo"></h2>
        <p class="porcentaje">
            <span class="numero" id="porcentaje-numero">0%</span>
            <span class="texto">de invitados han confirmado</span>
        </p>
        <div class="estadisticas">
            <div class="barra-progreso">
                <div class="barra" id="barra-progreso"></div>
            </div>
            <p class="detalles">
                <span class="confirmados" id="pases-confirmados">0</span> de <span class="total" id="total-pases">0</span> pases confirmados
            </p>
        </div>
        <Boton liga='#Confirmacion-comun' texto='Confirmar mi asistencia' claro={false} clases={'btn-oscuro '} />
    </div>
</div>

<script>
    async function actualizarProgreso() {
        const contenedor = document.getElementById('progreso-invitados');
        if (!contenedor) return;

        const email = contenedor.dataset.email;
        const porcentajeMinimo = parseInt(contenedor.dataset.porcentajeMinimo);
        const mostrarSiempre = contenedor.dataset.mostrarSiempre === 'true';
        const frase = contenedor.dataset.frase;

        try {
            const response = await fetch(`${window.location.origin}/api/getInvitados.json?email=${encodeURIComponent(email)}`);
            const invitados = await response.json();

            if (!Array.isArray(invitados)) {
                throw new Error('Datos inválidos recibidos');
            }

            // Calcular totales
            const totalPases = invitados.reduce((sum, invitado) => {
                const pases = parseInt(invitado.pases) || 0;
                return sum + pases;
            }, 0);

            const pasesConfirmados = invitados.reduce((sum, invitado) => {
                if (invitado.confirmado && !invitado.noAsiste) {
                    const pases = parseInt(invitado.pases) || 0;
                    return sum + pases;
                }
                return sum;
            }, 0);

            // Calcular el porcentaje de confirmados
            const porcentajeConfirmados = totalPases > 0 ? Math.round((pasesConfirmados / totalPases) * 100) : 0;

            // Actualizar la UI
            const mostrarComponente = mostrarSiempre || porcentajeConfirmados >= porcentajeMinimo;
            contenedor.style.display = mostrarComponente ? 'block' : 'none';

            if (mostrarComponente) {
                const fraseTitulo = document.getElementById('frase-titulo');
                const porcentajeNumero = document.getElementById('porcentaje-numero');
                const barraProgreso = document.getElementById('barra-progreso');
                const pasesConfirmadosEl = document.getElementById('pases-confirmados');
                const totalPasesEl = document.getElementById('total-pases');

                if (fraseTitulo) fraseTitulo.textContent = porcentajeConfirmados === 100 ? 
                    '¡Que empiece la fiesta, estamos todos listos!' : 
                    frase;

                if (porcentajeNumero) porcentajeNumero.textContent = `${porcentajeConfirmados}%`;
                if (barraProgreso) barraProgreso.style.setProperty('--progress', `${porcentajeConfirmados}%`);
                if (pasesConfirmadosEl) pasesConfirmadosEl.textContent = pasesConfirmados.toString();
                if (totalPasesEl) totalPasesEl.textContent = totalPases.toString();
            }
        } catch (error) {
            console.error('Error al obtener o procesar los datos:', error);
            contenedor.style.display = 'none';
        }
    }

    // Actualizar solo al cargar la página
    actualizarProgreso();
</script>

<style lang="scss">
    @use "../../estilos/_variables.scss" as *;

    .progreso-invitados {
        text-align: center;
        max-width: 600px;
        margin: 0 auto;
        padding-bottom: $margen;
    }

    .barra-progreso {
        width: 100%;
        height: 8px;
        background-color: var(--fondo);
        border-radius: 10px;
        overflow: hidden;
        margin: 1rem 0;
        @extend .sombra;
    }

    .barra {
        height: 100%;
        width: 0;
        background: linear-gradient(to right, var(--terciario), var(--acento));
        animation: crecer 1.5s ease-out forwards;
        border-radius: $radio;
    }

    @keyframes crecer {
        from {
            width: 0;
        }
        to {
            width: var(--progress);
        }
    }

    h2 {
        color: var(--acento);
        margin-bottom: 1rem;
        font-size: clamp(2rem, 2vw, 2rem);
    }

    .estadisticas {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        align-items: center;
    }

    .porcentaje {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .porcentaje .numero {
        font-family: $fuenteB, serif;
        font-size: 3rem;
        font-weight: bold;
        color: var(--acento);
    }

    .porcentaje .texto {
        font-size: 1.2rem;
        color: var(--primario);
    }

    .detalles {
        font-size: 1.1rem;
        color: var(--primario);
    }

    .detalles .confirmados,
    .detalles .total {
        font-weight: bold;
        color: var(--acento);
    }

    @media (max-width: 768px) {
        .progreso-invitados {
            padding: 1rem;
        }

        .porcentaje .numero {
            font-size: 2.5rem;
        }

        .porcentaje .texto {
            font-size: 1rem;
        }

        .detalles {
            font-size: 1rem;
        }

        .barra-progreso {
            height: 15px;
        }
    }
</style>