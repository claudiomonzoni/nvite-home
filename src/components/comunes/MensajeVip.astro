---
// El componente no necesita props ya que obtendrá los parámetros de la URL
---

<div id="mensaje-vip-container">
  <div class="mensaje-vip">
    <span class="etiqueta-vip">invitado especial</span>
    <div class="mensaje-contenido">
      <p class="mensaje-texto"></p>
    </div>
  </div>
</div>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import SplitType from "split-type";

  if (typeof ScrollTrigger === "undefined") {
    gsap.registerPlugin(ScrollTrigger);
  }

  const getMensajeVip = async () => {
    // Obtener los parámetros de la URL
    const urlParams = new URLSearchParams(window.location.search);
    const id = urlParams.get('id');
    const uid = urlParams.get('uid');

    if (!id || !uid) return;

    try {
      // Obtener el mensaje del invitado usando el endpoint
      const response = await fetch(`${window.location.origin}/api/getInvitado.json?id=${id}&uid=${uid}`);
      const data = await response.json();

      // Solo mostrar el mensaje si el invitado existe, es VIP y tiene un mensaje
      const mensaje = data[0]?.vip ? data[0]?.mensajePersonalizado : null;

      if (mensaje) {
        document.querySelector('.mensaje-texto').innerHTML = mensaje;
        const container = document.querySelector('#mensaje-vip-container') as HTMLElement;
        if (container) {
          container.style.display = 'block';
        }

        const initMensajeVip = () => {
          const context = gsap.context(() => {
            const mensajeElement = document.querySelector(".mensaje-texto") as HTMLElement;
            const container = document.querySelector("#mensaje-vip-container");

            if (mensajeElement && container) {
              // Split text into words and characters
              const splitText = new SplitType(mensajeElement, {
                types: "words,chars",
                tagName: "span",
              });

              // Set initial opacity for characters
              gsap.set(splitText.chars, { opacity: 0.2 });

              // Animate characters when the container enters the viewport
              gsap.to(splitText.chars, {
                scrollTrigger: {
                  trigger: ".mensaje-vip",
                  start: "top 80%",
                  toggleActions: "play none none reverse",
                },
                opacity: 1,
                duration: 0.8,
                stagger: 0.03,
                ease: "power2.out",
              });

              // Animate the VIP label
              gsap.from(".etiqueta-vip", {
                scrollTrigger: {
                  trigger: ".mensaje-vip",
                  start: "top 80%",
                  toggleActions: "play none none reverse",
                },
                opacity: 0,
                x: 20,
                duration: 0.5,
                ease: "power2.out",
              });
            }
          });

          // Cleanup animations when the component is removed
          return () => context.revert();
        };

        initMensajeVip();
      }
    } catch (error) {
      console.error('Error al obtener el mensaje VIP:', error);
    }
  };

  // Ejecutar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', getMensajeVip);
</script>

<style lang="scss">
  @use "../../estilos/_variables.scss" as *;
  #mensaje-vip-container {
    display: none;
  }

  .mensaje-vip {
    padding-top: $margen;
    margin-top: $margen ;
    position: relative;
  }

  .etiqueta-vip {
    position: absolute;
    top: 0rem;
    right: 0.5rem;
    background-color: var(--acento);
    color: white;
    font-size: 0.8rem;
    padding: 0.3rem 0.8rem;
    border-radius: 1rem;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .mensaje-contenido {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    margin-top: 0.5rem;
  }

  :global(.mensaje-texto) {
    font-family: $fuenteB, serif;
    text-align: center;
    margin: 0;
    font-size: clamp(2rem, 3vw, 4.5rem);
    line-height: 1.2!important;

    :global(.word) {
      display: inline-block;

      :global(.char) {
        color: var(--primario);
        display: inline-block;
      }
    }
  }
</style>
