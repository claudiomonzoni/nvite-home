---
// El componente no necesita props ya que obtendrá los parámetros de la URL
---

<div id="mensaje-vip-container"></div>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import SplitType from "split-type";

  gsap.registerPlugin(ScrollTrigger);

  const getMensajeVip = async () => {
    // Obtener los parámetros de la URL
    const urlParams = new URLSearchParams(window.location.search);
    const id = urlParams.get('id');
    const uid = urlParams.get('uid');

    if (!id || !uid) return;

    try {
      // Obtener el mensaje del invitado usando el endpoint
      const response = await fetch(`${window.location.origin}/api/getInvitado.json?id=${id}&uid=${uid}`);
      const data = await response.json();

      // Solo mostrar el mensaje si el invitado existe, es VIP y tiene un mensaje
      const mensaje = data[0]?.vip ? data[0]?.mensajePersonalizado : null;

      if (mensaje) {
        const container = document.getElementById('mensaje-vip-container');
        container.innerHTML = `
          <div class="mensaje-vip">
            <span class="etiqueta-vip">Invitado Especial</span>
            <div class="mensaje-contenido">
              <p class="mensaje-texto">${mensaje}</p>
            </div>
          </div>
        `;

        // Dividir el texto en letras
        const splitText = new SplitType('.mensaje-texto', { 
          types: 'chars',
          tagName: 'span'
        });
        
        // Establecer opacidad inicial
        gsap.set(splitText.chars, { 
          opacity: 0.3
        });

        // Animar cada letra cuando el contenedor entre en el viewport
        gsap.to(splitText.chars, {
          scrollTrigger: {
            trigger: '.mensaje-vip',
            start: 'top 80%',
            toggleActions: 'play none none reverse'
          },
          opacity: 1,
          duration: 0.8,
          stagger: 0.03,
          ease: 'power2.out'
        });

        // Animar la etiqueta VIP
        gsap.from('.etiqueta-vip', {
          scrollTrigger: {
            trigger: '.mensaje-vip',
            start: 'top 80%',
            toggleActions: 'play none none reverse'
          },
          opacity: 0,
          x: 20,
          duration: 0.5,
          ease: 'power2.out'
        });
      }
    } catch (error) {
      console.error('Error al obtener el mensaje VIP:', error);
    }
  };

  // Ejecutar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', getMensajeVip);
</script>

<style lang="scss">
  @use "../../estilos/_variables.scss" as *;

  :global(.mensaje-vip) {
    background: linear-gradient(135deg, #fff6e6 0%, #ffe4bc 100%);
    border-radius: 12px;
    padding: 1.5rem;
    margin: 1rem 0;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border: 1px solid #ffd699;
    position: relative;
  }

  :global(.etiqueta-vip) {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    background-color: $acento;
    color: white;
    font-size: 0.8rem;
    padding: 0.3rem 0.8rem;
    border-radius: 1rem;
    font-weight: 500;
    letter-spacing: 0.5px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  :global(.mensaje-contenido) {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    margin-top: 0.5rem;
  }

  :global(.mensaje-contenido p) {
    margin: 0;
    color: $primario;
    font-size: 1.1rem;
    line-height: 1.5;
    font-style: italic;
    width: 100%;
  }

  :global(.mensaje-texto .char) {
    display: inline-block;
  }
</style>
