---
import { NvitaAuth } from "../../firebase/config";
import Layout from "../../layouts/panelInvitados.astro";
import Menu from "../../components/PanelInvitados/Menu.astro";
import Invitado from "../../components/PanelInvitados/Invitado.astro";
import type { InvitadoProps } from "../../components/PanelInvitados/Invitado.astro";
import AgregarInvitado from "../../components/PanelInvitados/AgregarInvitado.astro";
import EditarInvitado from "../../components/PanelInvitados/EditarInvitado.astro";
import { Usuario, Invitados, db, eq, desc } from "astro:db";
import { Icon } from "astro-icon/components";

if (!NvitaAuth.currentUser) {
  alert("No estás autenticado. Por favor, inicia sesión.");
  return;
}
const usuarioEmail = NvitaAuth.currentUser.email;



if (!usuarioEmail) {
  console.error("El usuario no está autenticado.");
  throw new Error("Usuario no autenticado. Por favor, inicia sesión.");
}

let invitadosData = [];
let tipoInvitacion = null;
let ruta = null;

try {
  // Obtén los datos del usuario
  var usuarios = await db
    .select()
    .from(Usuario)
    .where(eq(Usuario.email, usuarioEmail));

    if (usuarios.length === 0) {
      throw new Error(`No se encontró un usuario con el email: ${usuarioEmail}`);
    }
    
    tipoInvitacion = usuarios[0].tipo;
    ruta = usuarios[0].ruta;
    
    // Obtén los datos de los invitados
    invitadosData = await db
    .select()
    .from(Invitados)
    .where(eq(Invitados.usuarioId, usuarios[0].id))
    .orderBy(desc(Invitados.id));
  } catch (error) {
    console.error("Error al obtener los datos:", error);
    invitadosData = [];
  }
  const usuarioId = usuarios[0].id;
---

<Layout title="Panel de administración">
  <Menu tipo={tipoInvitacion} ruta={ruta} />
  <section class="grid contenido">
    <div id="hero">
      <h1>Nvitaciones</h1>
      <div class="estadisticas">
        <div class="stat-item">
          <span class="stat-numero">{invitadosData.length}</span>
          <span class="stat-label">Total de invitaciones</span>
        </div>
        <div class="stat-item">
          <span class="stat-numero">
            {invitadosData.reduce((sum, inv) => {
              const pases = Math.round(parseFloat(inv.pases || "0"));
              return sum + (inv.noAsiste ? 0 : pases);
            }, 0)}
          </span>
          <span class="stat-label">Total de pases asignados</span>
        </div>
        <div class="stat-item">
          <span class="stat-numero">{invitadosData.filter(inv => inv.confirmado).length}</span>
          <span class="stat-label">Invitaciones confirmadas</span>
        </div>
        <div class="stat-item">
          <span class="stat-numero">{invitadosData.filter(inv => inv.noAsiste).length}</span>
          <span class="stat-label">No asisten</span>
        </div>
        <div class="stat-item">
          <span class="stat-numero">{invitadosData.filter(inv => inv.InvitacionEnviada).length}</span>
          <span class="stat-label">Invitaciones enviadas</span>
        </div>
      </div>
      <ol id="ayudas">
        <li>Invitación <b class="enviada">Enviada</b></li>
        <li>Invitación <b class="confirmado">Confirmada</b></li>
        <li>Invitación <b class="NoAsiste">No asite</b></li>
      </ol>
      <div class="filtros">
        <input
          id="search-input"
          type="text"
          placeholder="Buscar invitado por nombre..."
          class="buscador"
        />
        <div class="filtros-estado">
          <button class="filtro-btn activo" data-estado="todos">Todos</button>
          <button class="filtro-btn" data-estado="enviada">Enviada</button>
          <button class="filtro-btn" data-estado="confirmado">Confirmada</button>
          <button class="filtro-btn" data-estado="NoAsiste">No asiste</button>
        </div>
      </div>
    </div>
    <ul id="invitados-list">
      {
        invitadosData.length > 0 ? (
          invitadosData.map((invitado: InvitadoProps) => (
            <li
              class="invitado-item"
              data-nombre={invitado.nombre.toLowerCase()}
              data-estado={
                invitado.confirmado ? "confirmado" :
                invitado.noAsiste ? "NoAsiste" :
                invitado.InvitacionEnviada ? "enviada" : "todos"
              }
            >
              <Invitado
                invitadoData={invitado}
                ruta={ruta}
                tipo={tipoInvitacion}
              />
            </li>
          ))
        ) : (
          <p>
            No tienes invitados aún. Usa el botón de abajo para agregar uno.
          </p>
        )
      }
    </ul>

    {
      usuarioId ? (
        <>
        <button id="agregar-invitado">
          <Icon name="mdi:account-plus-outline" size={25} /> Agregar invitado
        </button>
        <AgregarInvitado usuarioId = {usuarioId} />
          <EditarInvitado />
        </>
      ) : (
        <>
          {console.error("No se encontró el ID del usuario.")}
        </>
      )
    }
  </section>

  <!-- <div id="auth-state" class="auth-banner hidden"></div> -->

</Layout>

<script>
  // Funcionalidad del buscador y filtros
  document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById("search-input") as HTMLInputElement;
    const invitadosList = document.getElementById("invitados-list");
    const invitadoItems = invitadosList.querySelectorAll(".invitado-item") as NodeListOf<HTMLLIElement>;
    const filtroBtns = document.querySelectorAll(".filtro-btn") as NodeListOf<HTMLButtonElement>;

    let estadoFiltro = "todos";

    // Función para filtrar invitados
    const filtrarInvitados = () => {
      const searchTerm = searchInput.value.toLowerCase();

      invitadoItems.forEach((item) => {
        const nombre = item.getAttribute("data-nombre") || "";
        const estado = item.getAttribute("data-estado") || "";
        
        const cumpleBusqueda = nombre.includes(searchTerm);
        const cumpleFiltro = estadoFiltro === "todos" || estado === estadoFiltro;
        
        item.style.display = cumpleBusqueda && cumpleFiltro ? "block" : "none";
      });
    };

    // Evento para el buscador
    searchInput.addEventListener("input", filtrarInvitados);

    // Evento para los botones de filtro
    filtroBtns.forEach(btn => {
      btn.addEventListener("click", () => {
        // Remover clase activo de todos los botones
        filtroBtns.forEach(b => b.classList.remove("activo"));
        // Agregar clase activo al botón clickeado
        btn.classList.add("activo");
        // Actualizar el estado del filtro
        estadoFiltro = btn.getAttribute("data-estado") || "todos";
        // Aplicar filtros
        filtrarInvitados();
      });
    });
  });
</script>


<style lang="scss">
  @import "../../estilos/_variables.scss";
  #hero {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 2rem;
    padding-bottom: $margen-min;
    @include cel {
      gap: 0.5rem;
    }
  }

  .buscador {
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 1rem;
    width: 100%;
    max-width: 400px;
    @include cel {
      margin-top: $margen-cel;
    }
  }

  #hero h1 {
    flex: 1 0 auto;
    font-size: clamp(2.2rem, 2.4vw, 4rem);
    color: $primario;
    width: fit-content;
  }
  #hero input {
    flex: 1 0 auto;
    @include cel {
      justify-content: center;
      align-items: center;
    }
  }
  #ayudas {
    display: flex;
    align-items: center;
    flex: 2 0 auto;
    gap: 1rem;
    flex-wrap: wrap;
    font-size: clamp(0.7rem, 0.7rem, 1rem);
    @include cel {
      display: inline-block;
      li{
        font-size: clamp(1rem, 0.7rem, 1rem);
        padding: .2rem 0;
        flex: 1 0 100;
      }
    }
  }

  #invitados-list{
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    @include cel {
      grid-template-columns: 1fr;
    }
    @include tableta {
      grid-template-columns: 1fr 1fr;
    }
    gap: 1rem;

    li{
      flex: 1 1 30%;
      width: fit-content;
    }
    @include cel {
      gap: 0.5rem;
    }
  }
  ul {
    flex: 1 0 auto;
    display: flex;
    align-items: center;
    gap: 1rem;
    font-size: clamp(0.5rem, 0.7rem, 1rem);
    text-align: center;
    @include cel {
      gap: 0.5rem;
    }
  }
  li {
    flex: 1 0 30%;
    list-style: none;
    margin-left: 0;
  }
  #agregar-invitado {
    background-color: $acento;
    border-radius: $radio;
    color: #fff;
    border: none;
    display: inline-block;
    text-align: center;
    padding: 0.5rem 1rem;
    font-size: clamp(1.1rem, 1rem, 2rem);
    font-weight: bold;
    margin: 1rem 0;
    position: fixed;
    right: 5%;
    bottom: 2%;
    @extend .sombra;
    svg {
      vertical-align: middle;
      margin-right: 0.2rem;
    }
  }

  .enviada {
    background-color: #edf8fd;
    padding: 0.3rem 0.5rem;
    border-radius: 5px;
    @extend .sombra;
  }

  .confirmado {
    background-color: $fondo;
    padding: 0.3rem 0.5rem;
    border-radius: 5px;
    @extend .sombra;
  }

  .NoAsiste {
    background-color: #c6bfb5;
    padding: 0.3rem 0.5rem;
    border-radius: 5px;
    @extend .sombra;
  }

  .filtros {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    width: 100%;
    max-width: 400px;
  }

  .filtros-estado {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .filtro-btn {
    padding: 0.5rem 1rem;
    border: 1px solid $acento;
    border-radius: $radio;
    background: transparent;
    color: $acento;
    cursor: pointer;
    transition: all 0.3s ease;

    &:hover {
      background: rgba($acento, 0.1);
    }

    &.activo {
      background: $acento;
      color: white;
    }
  }

  .estadisticas {
    display: flex;
    gap: 2rem;
    width: 100%;
    padding: 1rem;
    background: white;
    border-radius: $radio;
    margin-bottom: 1rem;
    flex-wrap: wrap;
    @extend .sombra;

    @include cel {
      gap: 1rem;
      padding: 0.5rem;
    }
  }

  .stat-item {
    flex: 1;
    min-width: 150px;
    text-align: center;
    padding: 1rem;
    border-right: 1px solid rgba($primario, 0.1);
    
    &:last-child {
      border-right: none;
    }

    @include cel {
      min-width: calc(50% - 1rem);
      padding: 0.5rem;
      border-right: none;
      border-bottom: 1px solid rgba($primario, 0.1);

      &:nth-last-child(-n+2) {
        border-bottom: none;
      }
    }
  }

  .stat-numero {
    display: block;
    font-size: 2rem;
    font-weight: bold;
    color: $acento;
    margin-bottom: 0.5rem;
  }

  .stat-label {
    display: block;
    font-size: 0.9rem;
    color: $primario;
  }

  //alerta
//   .auth-banner {
//   position: fixed;
//   top: 0;
//   width: 100%;
//   background-color: #ff4444;
//   color: white;
//   text-align: center;
//   padding: 10px;
//   z-index: 1000;
// }

// .hidden {
//   // display: none;
// }

</style>
