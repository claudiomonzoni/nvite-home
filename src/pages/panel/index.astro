---
import { NvitaAuth } from "../../firebase/config";
import Layout from "../../layouts/panelInvitados.astro";
import Menu from "../../components/PanelInvitados/Menu.astro";
import Invitado from "../../components/PanelInvitados/Invitado.astro";
import type { InvitadoProps } from "../../components/PanelInvitados/Invitado.astro";
import AgregarInvitado from "../../components/PanelInvitados/AgregarInvitado.astro";
import EditarInvitado from "../../components/PanelInvitados/EditarInvitado.astro";
import { Usuario, Invitados, db, eq, desc } from "astro:db";
import { Icon } from "astro-icon/components";

const usuarioEmail = NvitaAuth.currentUser?.email;

if (!usuarioEmail) {
  console.error("El usuario no está autenticado.");
  throw new Error("Usuario no autenticado. Por favor, inicia sesión.");
}

let invitadosData = [];
let tipoInvitacion = null;
let ruta = null;

try {
  // Obtén los datos del usuario
  const usuarios = await db
    .select()
    .from(Usuario)
    .where(eq(Usuario.email, usuarioEmail));

  if (usuarios.length === 0) {
    throw new Error(`No se encontró un usuario con el email: ${usuarioEmail}`);
  }

  tipoInvitacion = usuarios[0].tipo;
  ruta = usuarios[0].ruta;

  // Obtén los datos de los invitados
  invitadosData = await db
    .select()
    .from(Invitados)
    .where(eq(Invitados.usuarioId, usuarios[0].id))
    .orderBy(desc(Invitados.id));
} catch (error) {
  console.error("Error al obtener los datos:", error);
  invitadosData = [];
}
---

<Layout title="Panel de administración">
  <Menu tipo={tipoInvitacion} ruta={ruta} />
  <section class="grid contenido">
    <div id="hero">
      <h1>Invitaciones</h1>
      <ol id="ayudas">
        <li>Invitación <b class="enviada">Enviada</b></li>
        <li>Invitación <b class="confirmado">Confirmada</b></li>
        <li>Invitación <b class="NoAsiste">No asite</b></li>
      </ol>
      <input
        id="search-input"
        type="text"
        placeholder="Buscar invitado por nombre..."
        class="buscador"
      />
    </div>
    <ul id="invitados-list">
      {
        invitadosData.length > 0 ? (
          invitadosData.map((invitado: InvitadoProps) => (
            <li
              class="invitado-item"
              data-nombre={invitado.nombre.toLowerCase()}
            >
              <Invitado
                invitadoData={invitado}
                ruta={ruta}
                tipo={tipoInvitacion}
              />
            </li>
          ))
        ) : (
          <p>
            No tienes invitados aún. Usa el botón de abajo para agregar uno.
          </p>
        )
      }
    </ul>

    <button id="agregar-invitado">
      <Icon name="mdi:account-plus-outline" size={25} /> Agregar invitado
    </button>
    <AgregarInvitado />
    {
      invitadosData.length > 0 && (
        <>
          <EditarInvitado />
        </>
      )
    }
  </section>
</Layout>

<script>
  // Funcionalidad del buscador
  document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById(
      "search-input"
    ) as HTMLInputElement; // Especificamos el tipo
    const invitadosList = document.getElementById("invitados-list");
    const invitadoItems = invitadosList.querySelectorAll(
      ".invitado-item"
    ) as NodeListOf<HTMLLIElement>;

    searchInput.addEventListener("input", () => {
      const searchTerm = searchInput.value.toLowerCase(); // Ahora TypeScript no se quejará

      invitadoItems.forEach((item) => {
        const nombre = item.getAttribute("data-nombre") || "";
        if (nombre.includes(searchTerm)) {
          item.style.display = "block";
        } else {
          item.style.display = "none";
        }
      });
    });
  });
</script>

<style lang="scss">
  @import "../../estilos/_variables.scss";
  #hero {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 2rem;
    padding-bottom: $margen-min;
    @include cel {
      gap: 0.5rem;
    }
  }

  .buscador {
    padding: 0.5rem;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 1rem;
    width: 100%;
    max-width: 400px;
    @include cel {
      margin-top: $margen-cel;
    }
  }

  #hero h1 {
    flex: 1 0 auto;
    font-size: clamp(2.2rem, 2.4vw, 4rem);
    color: $primario;
    width: fit-content;
  }
  #hero input {
    flex: 1 0 auto;
    @include cel {
      justify-content: center;
      align-items: center;
    }
  }
  #ayudas {
    display: flex;
    align-items: center;
    flex: 2 0 auto;
    gap: 1rem;
    flex-wrap: wrap;
    font-size: clamp(0.7rem, 0.7rem, 1rem);
    @include cel {
      display: inline-block;
      li{
        font-size: clamp(1rem, 0.7rem, 1rem);
        padding: .2rem 0;
        flex: 1 0 100;
      }
    }
  }
  ul {
    flex: 1 0 auto;
    display: flex;
    align-items: center;
    gap: 1rem;
    font-size: clamp(0.5rem, 0.7rem, 1rem);
    text-align: center;
    @include cel {
      gap: 0.5rem;
    }
  }
  li {
    flex: 1 0 30%;
    list-style: none;
    margin-left: 0;
  }
  #agregar-invitado {
    background-color: $acento;
    border-radius: $radio;
    color: #fff;
    border: none;
    display: inline-block;
    text-align: center;
    padding: 0.5rem 1rem;
    font-size: clamp(1.1rem, 1rem, 2rem);
    font-weight: bold;
    margin: 1rem 0;
    position: fixed;
    right: 5%;
    bottom: 2%;
    @extend .sombra;
    svg {
      vertical-align: middle;
      margin-right: 0.2rem;
    }
  }

  .enviada {
    background-color: #edf8fd;
    padding: 0.3rem 0.5rem;
    border-radius: 5px;
    @extend .sombra;
  }

  .confirmado {
    background-color: $fondo;
    padding: 0.3rem 0.5rem;
    border-radius: 5px;
    @extend .sombra;
  }

  .NoAsiste {
    background-color: #c6bfb5;
    padding: 0.3rem 0.5rem;
    border-radius: 5px;
    @extend .sombra;
  }
</style>
