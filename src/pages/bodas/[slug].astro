---
import matter from 'gray-matter';
import Layout from "../../layouts/bodas/Layout.astro";
import Footer from "../../components/bodas/Footer.astro";

//componentes
import HeroElegante from "../../components/bodas/Hero-elegante.jsx";
import HeroBase from "../../components/bodas/Hero.jsx";
import Encabezados from "../../components/bodas/Encabezados.astro";
import Audio from "../../components/bodas/Audio.astro";
import Padres from "../../components/bodas/Padres.astro";
import Pases from "../../components/bodas/Pases";
import ProgresoInvitados from "../../components/comunes/ProgresoInvitados.astro";
import MensajeVip from "../../components/comunes/MensajeVip.astro";
import ParrafosLibres from "../../components/bodas/ParrafosLibres.astro";
import Frase from "../../components/bodas/Frase.astro";
import Detalles from "../../components/bodas/Detalles.astro";
import Galeria from "../../components/bodas/Galeria.astro";
import SliderGsap from "../../components/comunes/SilderGsap.astro";
import SliderVentana from "../../components/comunes/SliderVentana.astro";
import BloqueMapa from "../../components/bodas/BloqueMapa.astro";
import Regalos from "../../components/bodas/Regalos.astro";
import Contador from "../../components/bodas/Contador.astro";
import Confirmacion from "../../components/comunes/Confirmacion";
import Itinerario from "../../components/bodas/Itinerario.astro";
import FotoSolitaria from "../../components/comunes/FotoSolitaria.astro";

// SSR: fetch MDX/frontmatter from GitHub Raw using the slug on every request
const slug = Astro.params.slug as string;
if (!slug) {
  throw new Error('Slug no proporcionado');
}

// Evitar cache del HTML en el CDN/cliente
Astro.response.headers.set('Cache-Control', 's-maxage=10, stale-while-revalidate');

const owner = 'claudiomonzoni';
const repo = 'nvite-home';
const branch = 'keystatic';

// Helper para agregar query param
const withParam = (url: string, key: string, val: string) => url + (url.includes('?') ? '&' : '?') + `${key}=${encodeURIComponent(val)}`;
const cacheBust = Date.now().toString();

// Helper para convertir rutas públicas a GitHub Raw URLs
const toRawUrl = (maybePath: string | undefined): string | undefined => {
  if (!maybePath) return undefined;
  try { new URL(maybePath); return maybePath; } catch {}
  const p = maybePath.startsWith('/') ? maybePath : `/${maybePath}`;
  const base = `https://raw.githubusercontent.com/${owner}/${repo}/${branch}/public${p}`;
  return withParam(base, 'v', cacheBust);
};

// Descarga del archivo MDX
let mdxUrl = `https://raw.githubusercontent.com/${owner}/${repo}/${branch}/src/content/bodas/${slug}.mdx`;
mdxUrl = withParam(mdxUrl, 'v', cacheBust);
const headers: Record<string, string> = {};
const token = import.meta.env.GITHUB_TOKEN || process.env.GITHUB_TOKEN;
if (token) headers.Authorization = `Bearer ${token}`;

const res = await fetch(mdxUrl, { headers });
if (!res.ok) {
  return Astro.redirect('/404');
}
const mdxRaw = await res.text();

// Parsear frontmatter
const parsed = matter(mdxRaw);
const fm = parsed.data as any;

// Normalizar datos esperados por la página
const boda = {
  id: slug,
  data: {
    version: fm.version ?? '',
    draft: !!fm.draft,
    titulo: fm.titulo ?? slug,
    novios: fm.novios ?? '',
    ellaIniciales: fm.ellaIniciales ?? '',
    elIniciales: fm.elIniciales ?? '',
    fecha: fm.fecha ? new Date(fm.fecha) : new Date(),
    whatsapp: fm.whatsapp ?? '',
    email: fm.email ?? '',
    frase_amor: fm.frase_amor ?? '',
    padres: {
      mamaNovia: fm?.padres?.mamaNovia ?? '',
      papaNovia: fm?.padres?.papaNovia ?? '',
      fotopapasNovia: toRawUrl(fm?.padres?.fotopapasNovia) ?? '',
      mamaNovio: fm?.padres?.mamaNovio ?? '',
      papaNovio: fm?.padres?.papaNovio ?? '',
      fotopapasNovio: toRawUrl(fm?.padres?.fotopapasNovio) ?? '',
    },
    json: fm.json ?? '',
    cover: toRawUrl(fm.cover) ?? '',
    galeria: Array.isArray(fm?.galeria) ? fm.galeria.map((p: string) => toRawUrl(p)) : [],
    imagenesSolitarias: Array.isArray(fm?.imagenesSolitarias) ? fm.imagenesSolitarias.map((p: string) => toRawUrl(p)) : [],
    ceremonia: {
      hora: fm?.ceremonia?.hora ?? '',
      lugar: fm?.ceremonia?.lugar ?? '',
      lat: fm?.ceremonia?.lat ?? '',
      lng: fm?.ceremonia?.lng ?? '',
    },
    recepcion: {
      hora: fm?.recepcion?.hora ?? '',
      lugar: fm?.recepcion?.lugar ?? '',
      lat: fm?.recepcion?.lat ?? '',
      lng: fm?.recepcion?.lng ?? '',
    },
    itinerario: Array.isArray(fm?.itinerario) ? fm.itinerario : [],
    consideraciones: Array.isArray(fm?.consideraciones) ? fm.consideraciones : [],
    vestimenta: fm.vestimenta ?? '',
    coloresVestimenta: Array.isArray(fm?.coloresVestimenta) ? fm.coloresVestimenta : [],
    frase_regalos: fm.frase_regalos ?? '',
    tipoRegalo: Array.isArray(fm?.tipoRegalo) ? fm.tipoRegalo : [],
    mesaRegalos: Array.isArray(fm?.mesaRegalos) ? fm.mesaRegalos : [],
    beneficiario: fm.beneficiario ?? '',
    banco: fm.banco ?? '',
    cuenta: fm.cuenta ?? '',
    paleta: fm.paleta ?? 'base',
    theme: fm.theme ?? { name: 'base' },
    content: parsed.content ?? '',
  }
} as any;

const base = new URL(Astro.url.pathname, Astro.site);
const galeria: string[] = (boda.data as any).galeria ?? [];
const imagenesSolitarias: string[] = (boda.data as any).imagenesSolitarias ?? [];

type Mesa = { url: string; titulo: string };
const mesas: Mesa[] = ((boda.data as any).mesaRegalos ?? []).filter(
  (m: any): m is Mesa => typeof m?.url === 'string' && m.url && typeof m?.titulo === 'string' && m.titulo
);

---
<Layout
  title=`Invitación de boda de ${boda.data.novios}`
  url={base.toString()}
  cover={boda.data.cover}
  paleta={boda.data.paleta}
  theme={boda.data.theme}
>
  <section id="hero-hero">
    {
      (() => {
        switch (boda.data.theme.name) {
          case 'elegante':
            return (
              <HeroElegante
                nombres={boda.data.novios}
                fecha={boda.data.fecha}
                ellaIniciales={boda.data.ellaIniciales}
                elIniciales={boda.data.elIniciales}
                cover={boda.data.cover}
                client:load
              />
            );
          case 'base':
            return (
              <HeroBase
                nombres={boda.data.novios}
                fecha={boda.data.fecha}
                ellaIniciales={boda.data.ellaIniciales}
                elIniciales={boda.data.elIniciales}
                cover={boda.data.cover}
                client:load
              />
            );
          default:
            return null;
        }
      })()
    }
  </section>
  

  {
    boda.data.galeria.length > 0 && (
      <section class="grid pantalla">
        <Galeria galeria={boda.data.galeria} />
      </section>
    )
  }


{
    boda.data.version === "Lux" && (
      
      <section class="grid contenido">
    <Audio src="/bodas/nvitaPlus/love-story" />
  </section>
    
  <section class="grid pantalla">
    <Padres
      mamaNovia={boda.data.padres.mamaNovia}
      papaNovia={boda.data.padres.papaNovia}
      fotopapasNovia={boda.data.padres.fotopapasNovia}
      mamaNovio={boda.data.padres.mamaNovio}
      papaNovio={boda.data.padres.papaNovio}
      fotopapasNovio={boda.data.padres.fotopapasNovio}
      />
  </section>

<Pases folder={boda.data.json} client:load />
)
}

<section class="grid contenido">
  <Frase frase={boda.data.frase_amor} />
</section>



  <section class="grid contenido">
    <div class="bandejaLugares">
      <BloqueMapa
        encabezado="Ceremonia"
        dir={boda.data.ceremonia.lugar}
        horario={boda.data.ceremonia.hora}
        lat={boda.data.ceremonia.lat}
        lng={boda.data.ceremonia.lng}
        mapName="mapa1"
        icono="iglesia"
      />
      <BloqueMapa
        encabezado="Recepción"
        dir={boda.data.recepcion.lugar}
        horario={boda.data.recepcion.hora}
        lat={boda.data.recepcion.lat}
        lng={boda.data.recepcion.lng}
        mapName="mapa2"
        icono="brindis"
      />
    </div>
  </section>


  <!-- Imágenes solitarias condicionales -->
  {
    imagenesSolitarias[0] && (
      <FotoSolitaria
        arriba={false}
        gradientePorciento={40}
        src={imagenesSolitarias[0]}
      />
    )
  }

  <section class="grid contenido">
    <Contador fecha={boda.data.fecha.toISOString()} />
  </section>
  <!-- Itinerario condicional según versión -->
  {
    (boda.data.version === "Lux" || boda.data.version === "Clasica") && (
  <ProgresoInvitados
    email={boda.data.email}
    porcentajeMostrarInvitados={20}
    frase="Estás en la lista, ¿Ya confirmaste?"
    mostrarSiempre={true}
  />

  
      <section class="grid pantalla" id="BaseItinerario">
        <Encabezados texto="Itinerario" />
        <Itinerario listado={boda.data.itinerario} />
      </section>
    )
  }

  {
    imagenesSolitarias[1] && (
      <FotoSolitaria
        arriba={true}
        gradientePorciento={30}
        src={imagenesSolitarias[1]}
      />
    )
  }



  <section class="grid pantalla flex margen-arriba-abajo">
    <Detalles lista={boda.data.consideraciones} encabezado="Consideraciones" />
    <Detalles encabezado="Codigo de vestir" vestimenta={boda.data.vestimenta} />
    <Detalles
      encabezado="Sugerencia de tonos"
      colores={boda.data.coloresVestimenta}
    />
  </section>

  <section class="grid pantalla">
    <SliderVentana>
      {
        galeria &&
          galeria.map((src) => (
            <div class="img-window">
              <img
                src={src}
                alt={`Galería de ${boda.data.novios || "Bodas de Nvitaciones"}`}
                loading="lazy"
              />
            </div>
          ))
      }
    </SliderVentana>
  </section>

  <section class="grid contenido">

    <Regalos
    tipo={boda.data.tipoRegalo}
    mesas={mesas}
        frase={boda.data.frase_regalos}
        beneficiario={boda.data.beneficiario}
        banco={boda.data.banco}
        cuenta={boda.data.cuenta}
      />
  </section>

  <section class="grid contenido">
    <MensajeVip />
  </section>

    {
    imagenesSolitarias[2] && (
      <FotoSolitaria
        arriba={true}
        gradientePorciento={35}
        src={imagenesSolitarias[2]}
      />
    )
  }

  <Confirmacion
    whatsapp={boda.data.whatsapp}
    dias_antes={15}
    version={boda.data.version}
    client:only="react"
  />
  <section class="grid contenido">
    <Footer ruta={base} />
  </section>
</Layout>
