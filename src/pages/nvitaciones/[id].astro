---
// Importaciones principales
const { id } = Astro.params;
import { getProductPrice } from "../../js/cart";
import { calculateDeliveryDate } from "../../js/utils";
import { Image } from "astro:assets";
import { getEntry } from "astro:content";
import { Icon } from "astro-icon/components";

// Componentes
import Layout from "../../layouts/Layout.astro";
import Footer from "../../components/Footer.astro";
import Nav from "../../components/Nav.astro";
import Btn from "../../components/Btn.astro";
import Breadcrumb from "../../components/Breadcrumb.astro";
import SocialShare from "../../components/SocialShare.astro";
import RelatedProducts from "../../components/Pagos/RelatedProducts.astro";
import Testimonios from "../../components/Testimonios.astro";

// Datos
import nvitacionesData from "./nvitaciones.json";

// Configuración de imágenes
const imageModules = import.meta.glob<{ default: ImageMetadata }>(
  "../../assets/cart/**/*.{jpg,jpeg,png,gif,webp}",
  { eager: true }
);

// Función para cargar las imágenes del producto
async function getProductImages(nvitacionInfo) {
  if (!product) return [];

  try {
    const imagenes = [];

    // Primero añadir la imagen de Stripe si está disponible
    if (product.data.images?.length > 0) {
      imagenes.push(product.data.images[0]);
    }

    // Luego añadir imágenes desde nvitacionInfo
    if (nvitacionInfo?.imagenes) {
      for (const imagePath of nvitacionInfo.imagenes) {
        const normalizedPath = imagePath.replace(/\\/g, "/");
        const moduleKey = Object.keys(imageModules).find((key) => {
          const keyLower = key.toLowerCase();
          const pathLower = normalizedPath.toLowerCase();
          return keyLower.endsWith(pathLower.replace("../../assets/", ""));
        });

        if (moduleKey && moduleKey in imageModules) {
          imagenes.push(imageModules[moduleKey].default);
        } else {
          console.error(`No se pudo cargar la imagen: ${imagePath}`);
        }
      }
    }

    return imagenes;
  } catch (error) {
    console.error("Error cargando imágenes:", error);
    return product.data.images || [];
  }
}

// Obtener datos del producto
const product = await getEntry("productos", id as string);
const nvitacionInfo = nvitacionesData.find(
  (item) => item.id === product?.data.id
);
const imagenes = await getProductImages(nvitacionInfo);

// Manejo de 404
if (!product) {
  return new Response(null, { status: 404, statusText: "Not Found" });
}

const price = await getProductPrice(product);
const productId = product.data.id;
---

<Layout title=`${product.data.name} - Invitación Digitales para tu evento`>
  <div class="grid contenido">
    <Nav />

    <div class="breadcrumb-container">
      <Breadcrumb
        categoria={nvitacionInfo?.tipo === "PDF"
          ? "pdf"
          : nvitacionInfo?.categoria?.toLowerCase()}
        nombre={product.data.name}
      />
    </div>

    <div id="producto-conte">
      <div id="izq">
        <div id="fix">
          <div class="gallery-container">
            <div class="thumbnails-container">
              {
                imagenes.map((imagen) => (
                  <div class="thumbnail-wrapper" data-full-img={imagen.src}>
                    <Image
                      src={imagen}
                      alt={`Imagen de ${product.data.name}`}
                      height={80}
                      width={80}
                      class="thumbnail"
                      quality="max"
                    />
                  </div>
                ))
              }
            </div>
            <div class="main-image-container">
              <Image
                src={imagenes[0]}
                loading="eager"
                alt={product.data.name}
                height={800}
                width={800}
                class="main-image"
                quality="max"
              />
            </div>
          </div>
        </div>
      </div>

      <div id="der">
        <div id="titulo">
          <div class="metadata">
            {
              nvitacionInfo && (
                <>
                  {nvitacionInfo.categoria && (
                    <li>Categoría: {nvitacionInfo.categoria}</li>
                  )}
                  {nvitacionInfo.tipo && <li>Tipo: {nvitacionInfo.tipo}</li>}
                  {nvitacionInfo.version && (
                    <li>Versión: {nvitacionInfo.version}</li>
                  )}
                </>
              )
            }
          </div>
          <!-- <p>{product.data.id}</p> -->
          <h1>{product.data.name}</h1>
          <p>{product.data.description}</p>

          <p id="vendidos"></p>
          <p class="price">{price.slice(0, -2)}<sup>{price.slice(-2)}</sup></p>

          {
            nvitacionInfo && nvitacionInfo.muestra && (
              <div class="liga-muetra">
                <Btn
                  liga={nvitacionInfo.muestra}
                  texto="Ver Nvitación de Muestra"
                  icono="mdi:eye"
                  clases="btn-oscuro"
                  claro={false}
                />
              </div>
            )
          }

          <div id="datosjson">
            {
              nvitacionInfo && (
                <div class="info-adicional">
                  {nvitacionInfo.beneficios && (
                    <ul class="beneficios">
                      {nvitacionInfo.beneficios.map((beneficio) => (
                        <li class="check-item">{beneficio}</li>
                      ))}
                    </ul>
                  )}
                </div>
              )
            }

            {
              nvitacionInfo && nvitacionInfo.video && (
                <div id="video-home">
                  <div id="play">
                    <Icon name="mdi:play-circle" color="white" size={70} />
                  </div>
                  <video
                    preload="auto"
                    poster={product.data.images[0]}
                    id="video-producto"
                    playsinline
                  >
                    <source src={nvitacionInfo.video} type="video/mp4" />
                  </video>
                </div>
              )
            }
          </div>
        </div>

        <div class="buttons-container">
          <Btn
            data-cart
            data-action="increment"
            data-productid={product.data.id}
            liga="#"
            texto="Agregar al carrito"
            clases="btn-oscuro"
            claro={false}
            icono="mdi:cart-plus"
          />
          <Btn
            data-cart
            data-action="buy-now"
            data-productid={product.data.id}
            liga="#"
            clases="btn-claro"
            texto="Comprar ahora"
            icono="mdi:cart-check"
            claro={true}
          />
          <div id="ahora">
            <p>
              Compra ahora y <b>recibe tu invitación</b>a más tardar el {
                calculateDeliveryDate()
              }
            </p>
            <a id="terminos" href="/terminos-condiciones"
              >ver terminos y condiciones</a
            >
          </div>
          <SocialShare
            url={Astro.url.toString()}
            title={`Mira esta ${nvitacionInfo?.tipo || "invitación"} en Nvitaciones.com: ${product.data.name}`}
          />
        </div>
      </div>
    </div>

    <RelatedProducts
      currentProductId={product.id}
      category={nvitacionInfo?.categoria ||
        product.data.metadata?.Categoria ||
        ""}
    />
  </div>
  <Testimonios />
  <Footer />
</Layout>

<style lang="scss">
  @use "../../estilos/variables" as *;

  // Layout & Container styles
  .breadcrumb-container {
    margin-top: 7rem;
    @include cel {
      margin-top: 12rem;
    }
  }

  #producto-conte {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 2rem;
    align-items: stretch;

    @include cel {
      grid-template-columns: 1fr;
    }
  }

  // Left column styles
  #izq {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    height: 100%;
    position: relative;
    overflow: visible;
  }

  #fix {
    position: sticky;
    top: 4rem;
  }

  // Right column styles
  #der {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 2rem;
    height: 100%;

    #titulo {
      display: grid;
      gap: 1rem;
    }

    .buttons-container {
      display: grid;
      align-self: flex-start;
      background: white;
      border-radius: $radio;
      padding: $margen-min;
      @extend .sombra;

      a {
        max-width: 100%;
      }
      a:first-child {
        margin-bottom: 1rem;
      }
      p {
        font-size: 0.8rem;
        margin: 0;
      }
    }

    @include cel {
      grid-template-columns: 1fr;
      gap: 0;
      height: auto;
    }
  }

  // Typography styles
  h1 {
    color: $primario;
    font-size: clamp(2rem, 5vw, 3rem);
    border-bottom: solid 1px $primario;
  }

  .price {
    font-size: 1.5rem;
    font-weight: bold;
    color: $primario;
    
    sup {
      font-size: 0.5em;
      vertical-align: super;
    }
  }

  // Gallery styles
  .gallery-container {
    display: flex;
    gap: 1rem;
    margin: 0 auto;
  }

  .thumbnails-container {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    width: 100px;
  }

  .thumbnail-wrapper {
    cursor: pointer;
    border: 2px solid transparent;
    border-radius: $radio;
    overflow: hidden;
    transition: all 0.3s ease;
    display: flex;
    justify-content: center;

    &:hover {
      background: #c8c8c8;
    }

    &.active {
      border: $acento;
    }
  }

  .thumbnail {
    width: 60%;
    height: auto;
    display: block;
    @include cel {
      width: 40%;
    }
  }

  .main-image-container {
    flex: 1;
    position: relative;
    overflow: hidden;
    border-radius: 8px;

    .main-image {
      max-width: 100%;
      width: auto;
      height: auto;
      display: block;
      margin: 0 auto;
      object-fit: contain;
      transition: transform 0.3s ease;
    }
  }

  // Additional info styles
  .info-adicional {
    padding: 1rem;
    border-radius: 8px;
    background-color: #f8f9fa;
  }

  .beneficios {
    list-style: none;
    padding: 0;
    margin: 1rem 0;

    .check-item {
      list-style: none;
      position: relative;
      margin-bottom: 0.5rem;

      &::before {
        content: "✓";
        position: absolute;
        left: -1.3rem;
        color: $acento;
        font-weight: bold;
      }
    }
  }

  // Metadata styles
  .metadata {
    display: flex;
    color: $acento;
    font-size: 0.8rem;
    gap: 0.7rem;
    margin-top: 1rem;
    padding-top: 1rem;
    border-top: 1px solid #e9ecef;

    li {
      list-style: none;
      margin: 0;
    }
  }

  // Video styles
  #video-home {
    width: 100%;
    max-width: 337px;
    margin: 0 auto;
    position: relative;
    border-radius: $radio;
    overflow: hidden;

    video {
      width: 100%;
      display: block;
      border-radius: $radio;
    }

    #play {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 1;
      cursor: pointer;

      svg {
        width: 70px;
        height: 70px;
        path {
          fill: $acento;
        }
      }
    }
  }

  // Utility styles
  #vendidos {
    font-size: 0.8rem;
    color: $gris;
  }

  #terminos {
    font-size: 0.6rem;
    color: $gris;
    text-decoration: underline;
  }

  #ahora p {
    font-size: 0.8rem;
    color: $acento;
    margin-top: 1rem;
    
    b {
      margin-right: 0.5rem;
    }
  }

  @media (max-width: 640px) {
    .buttons-container {
      flex-direction: column;
    }
  }
</style>

<script>
  import { generateRandomSales } from "../../js/utils";

  class ProductPage {
    constructor() {
      // Inicializar cuando el documento esté listo
      document.addEventListener("astro:page-load", () => this.init());
      if (document.readyState === "complete") {
        this.init();
      }
    }

    init() {
      this.initializeSalesMessage();
      this.initializeBuyNowButtons();
      this.initializeGallery();
      this.initializeVideoPlayer();
    }

    // Manejo de ventas aleatorias
    initializeSalesMessage() {
      const vendidosDiv = document.getElementById("vendidos");
      const productId = document
        .querySelector("[data-productid]")
        ?.getAttribute("data-productid");

      if (!vendidosDiv || !productId) return;

      const cookieKey = `sales_${productId}`;
      const existingNumber = document.cookie
        .split(";")
        .find((c) => c.trim().startsWith(`${cookieKey}=`))
        ?.split("=")[1];

      let salesNumber = existingNumber
        ? parseInt(existingNumber)
        : generateRandomSales();

      if (!existingNumber) {
        const expires = new Date();
        expires.setDate(expires.getDate() + 7);
        document.cookie = `${cookieKey}=${salesNumber};expires=${expires.toUTCString()};path=/`;
      }

      if (salesNumber > 0) {
        vendidosDiv.innerHTML = `<b>${salesNumber} Nvitaciones vendidas</b> en el último mes.`;
      } else {
        vendidosDiv.innerHTML = "";
      }
    }

    // Manejo de galería de imágenes
    initializeGallery() {
      const mainImage = document.querySelector(".main-image") as HTMLImageElement;
      const mainImageContainer = document.querySelector(".main-image-container") as HTMLElement;
      const thumbnails = document.querySelectorAll(".thumbnail-wrapper");

      if (!mainImage || !thumbnails.length || !mainImageContainer) return;

      const stripeImage = mainImage.src;
      thumbnails[0].classList.add("active");

      thumbnails.forEach((thumb, index) => {
        thumb.addEventListener("click", () => {
          const fullSizeImage = index === 0 ? stripeImage : thumb.getAttribute("data-full-img");
          if (!fullSizeImage) return;

          mainImage.src = fullSizeImage;
          thumbnails.forEach((t) => t.classList.remove("active"));
          thumb.classList.add("active");
        });
      });
    }

    // Manejo del reproductor de video
    initializeVideoPlayer() {
      const video = document.getElementById("video-producto") as HTMLVideoElement;
      const playButton = document.getElementById("play") as HTMLDivElement;
      const videoContainer = document.getElementById("video-home") as HTMLDivElement;

      if (!video || !playButton || !videoContainer) return;

      const newVideo = video.cloneNode(true) as HTMLVideoElement;
      const newPlayButton = playButton.cloneNode(true) as HTMLDivElement;

      video.parentNode?.replaceChild(newVideo, video);
      playButton.parentNode?.replaceChild(newPlayButton, playButton);

      const togglePlay = (e: Event) => {
        e.preventDefault();
        e.stopPropagation();

        if (newVideo.paused) {
          const playPromise = newVideo.play();
          if (playPromise !== undefined) {
            playPromise
              .then(() => {
                newPlayButton.style.display = "none";
              })
              .catch((error) => {
                console.error("Error reproduciendo video:", error);
                newPlayButton.style.display = "flex";
              });
          }
        } else {
          newVideo.pause();
          newPlayButton.style.display = "flex";
        }
      };

      newVideo.addEventListener("play", () => newPlayButton.style.display = "none");
      newVideo.addEventListener("pause", () => newPlayButton.style.display = "flex");
      newVideo.addEventListener("ended", () => {
        newVideo.currentTime = 0;
        newPlayButton.style.display = "flex";
      });

      newPlayButton.addEventListener("click", togglePlay);
      newVideo.addEventListener("click", togglePlay);
      newPlayButton.style.display = "flex";
    }

    // Manejo de botones de compra
    initializeBuyNowButtons() {
      const buyNowButtons = document.querySelectorAll('[data-action="buy-now"]');
      buyNowButtons.forEach(button =>
        button.addEventListener("click", this.handleBuyNow)
      );
    }

    private handleBuyNow(event: Event) {
      event.preventDefault();
      const button = event.currentTarget as HTMLElement;
      const productId = button.getAttribute("data-productid");
      if (!productId) return;

      const cartItems = this.getCartItemsFromCookie();
      if (!cartItems.includes(productId)) {
        cartItems.push(productId);
        document.cookie = `cartItems=${JSON.stringify(cartItems)};path=/;max-age=31536000`;
        document.dispatchEvent(new CustomEvent("cart:updated"));
      }

      window.location.href = "/nvitaciones/checkout";
    }

    private getCartItemsFromCookie(): string[] {
      const cookie = document.cookie
        .split(";")
        .find((c) => c.trim().startsWith("cartItems="))
        ?.split("=")[1];

      return cookie ? JSON.parse(cookie) : [];
    }
  }

  // Inicializar la página
  new ProductPage();
</script>
