---
import matter from 'gray-matter';
import Layout from "../../layouts/quince/Layout.astro";

//componentes
import Hero from "../../components/quince/Hero";
import Audio from "../../components/quince/Audio.astro";
import ProgresoInvitados from "../../components/comunes/ProgresoInvitados.astro";
import MensajeVip from "../../components/comunes/MensajeVip.astro";
import Encabezados from "../../components/quince/Encabezados.astro";
import Cartas from "../../components/quince/Cartas.astro";
import Frase from "../../components/quince/Frase.astro";
import SilderGsap from "../../components/comunes/SilderGsap.astro";
import BloqueMapa from "../../components/quince/BloqueMapa.astro";
import Regalos from "../../components/comunes/Regalos.astro";
import Contador from "../../components/bodas/Contador.astro";
import Itinerario from "../../components/quince/Itinerario.astro";
import Confirmacion from "../../components/comunes/Confirmacion";  
import ConfirmacionBasica from "../../components/quince/ConfirmacionBasica";  
import FotoSolitaria from "../../components/comunes/FotoSolitaria.astro";
import Padres from '../../components/quince/Padres.astro';
import Footer from "../../components/quince/Footer.astro";

// SSR: fetch MDX/frontmatter from GitHub Raw using the slug on every request
const slug = Astro.params.slug as string;
if (!slug) {
  throw new Error('Slug no proporcionado');
}

// Evitar cache del HTML en el CDN/cliente
Astro.response.headers.set('Cache-Control', 's-maxage=10, stale-while-revalidate');

const owner = 'claudiomonzoni';
const repo = 'nvite-home';
const branch = 'master';

// Helper para agregar query param
const withParam = (url: string, key: string, val: string) => url + (url.includes('?') ? '&' : '?') + `${key}=${encodeURIComponent(val)}`;
const cacheBust = Date.now().toString();

// Helper para convertir rutas públicas a GitHub Raw URLs
const toRawUrl = (maybePath: string | undefined): string | undefined => {
  if (!maybePath) return undefined;
  // Si ya es URL absoluta, dejarla igual
  try { new URL(maybePath); return maybePath; } catch {}
  // Normalizar prefijo
  const p = maybePath.startsWith('/') ? maybePath : `/${maybePath}`;
  // Keystatic guarda imágenes en public/* y expone con publicPath que empieza con "/..."
  // Las serviremos directamente desde GitHub raw para evitar redeploys
  const base = `https://raw.githubusercontent.com/${owner}/${repo}/${branch}/public${p}`;
  return withParam(base, 'v', cacheBust);
};

// Descarga del archivo MDX
let mdxUrl = `https://raw.githubusercontent.com/${owner}/${repo}/${branch}/src/content/quince/${slug}.mdx`;
mdxUrl = withParam(mdxUrl, 'v', cacheBust);
const headers: Record<string, string> = {};
const token = import.meta.env.GITHUB_TOKEN || process.env.GITHUB_TOKEN;
if (token) headers.Authorization = `Bearer ${token}`;

const res = await fetch(mdxUrl, { headers });
if (!res.ok) {
  return Astro.redirect('/404');
}
const mdxRaw = await res.text();

// Parsear frontmatter
const parsed = matter(mdxRaw);
const fm = parsed.data as any;

// Normalizar datos esperados por la página
const quince = {
  id: slug,
  data: {
    version: fm.version ?? '',
    draft: !!fm.draft,
    titulo: fm.titulo ?? slug,
    whatsapp: fm.whatsapp ?? '',
    email: fm.email ?? '',
    quinceanera: fm.quinceanera ?? '',
    padres: {
      mama: fm?.padres?.mama ?? '',
      papa: fm?.padres?.papa ?? '',
      fotopapas: toRawUrl(fm?.padres?.fotopapas) ?? '',
    },
    fecha: fm.fecha ? new Date(fm.fecha) : new Date(),
    frase_amor: fm.frase_amor ?? '',
    ceremonia: {
      hora: fm?.ceremonia?.hora ?? '',
      lugar: fm?.ceremonia?.lugar ?? '',
      lat: fm?.ceremonia?.lat ?? '',
      lng: fm?.ceremonia?.lng ?? '',
    },
    recepcion: {
      hora: fm?.recepcion?.hora ?? '',
      lugar: fm?.recepcion?.lugar ?? '',
      lat: fm?.recepcion?.lat ?? '',
      lng: fm?.recepcion?.lng ?? '',
    },
    itinerario: Array.isArray(fm?.itinerario) ? fm.itinerario : [],
    cover: toRawUrl(fm.cover) ?? '',
    galeria: Array.isArray(fm?.galeria) ? fm.galeria.map((p: string) => toRawUrl(p)) : [],
    imagenesSolitarias: Array.isArray(fm?.imagenesSolitarias) ? fm.imagenesSolitarias.map((p: string) => toRawUrl(p)) : [],
    frase_regalos: fm.frase_regalos ?? '',
    regalos: Array.isArray(fm?.regalos) ? fm.regalos : [],
    tipoRegalos: Array.isArray(fm?.tipoRegalos) ? fm.tipoRegalos : [],
    beneficiario: fm.beneficiario ?? '',
    banco: fm.banco ?? '',
    cuenta: fm.cuenta ?? '',
    progresoPorcentaje: typeof fm.progresoPorcentaje === 'number' ? fm.progresoPorcentaje : 20,
    progresoFrase: fm.progresoFrase ?? '¡Ya casi completamos la lista de invitados!',
    progresoMostrarSiempre: fm.progresoMostrarSiempre ?? true,
    consideraciones: Array.isArray(fm?.consideraciones) ? fm.consideraciones : [],
    vestimenta: fm.vestimenta ?? '',
    coloresVestimenta: Array.isArray(fm?.coloresVestimenta) ? fm.coloresVestimenta : [],
    paleta: fm.paleta ?? 'base',
    theme: fm.theme ?? { name: 'base' },
    content: parsed.content ?? '',
  }
} as any;

const base = new URL(Astro.url.pathname, Astro.site);
const Nfecha = new Date(quince.data.fecha);

const imagenesSolitarias: string[] = (quince.data as any).imagenesSolitarias ?? [];

// Tipado local para la galería
const galeria: string[] = (quince.data as any).galeria ?? [];
// Tipado y normalización local para mesas de regalos
type Mesa = { url: string; titulo: string };
const mesas: Mesa[] = ((quince.data as any).regalos ?? []).filter(
  (m: any): m is Mesa => typeof m?.url === 'string' && m.url && typeof m?.titulo === 'string' && m.titulo
);

---

<Layout
  title=`Invitación de quince de ${quince.data.quinceanera}`
  url={base.toString()}
  cover={quince.data.cover}
  paleta={quince.data.paleta}
  theme={quince.data.theme}
>


<Hero
  nombres={quince.data.quinceanera}
  fecha={quince.data.fecha}
  cover={quince.data.cover}
  client:load
/>

<Encabezados texto="Mis 15 años" />
  <section class="grid pantalla">
    <Padres
      mama={quince.data.padres.mama}
      papa={quince.data.padres.papa}
      fotopapas={quince.data.padres.fotopapas}
    
      />
  </section>

{
    quince.data.version === "Lux" && (
<section class="grid contenido">
  <Audio src="/quince/quincePlus/quince-musica" />
</section>
)
}


<!-- <ParrafosLibres
  texto="He soñado mucho con este día, y me llena de ilusión compartirlo contigo.
Para que no se te pase nada, revisa todos los detalles aquí abajo:"
/> -->

<section class="grid contenido">
  <div class="conte-cartas">
    <Cartas
    icono="mdi:list-status"
    titulo="Detalles"
    array={quince.data.consideraciones}
    />
    <Cartas
    icono="mdi:clothes-hanger"
    titulo="Dress code"
    codigo={quince.data.vestimenta}
    />
    <Cartas
      icono="mdi:clipboard-text-date-outline"
      titulo="Sugerencia de tonos"
      tonos={quince.data.coloresVestimenta}
    />
  </div>
</section>

<section class="grid contenido">
  <Frase frase={quince.data.frase_amor} />
</section>

 <!-- Imágenes solitarias condicionales -->
  {
    imagenesSolitarias[0] && (
      <FotoSolitaria
        arriba={true}
        gradientePorciento={50}
        src={imagenesSolitarias[0]}
      />
    )
  }
<section class="grid contenido fondo-mitad">
  <!-- <ParrafosLibres
    texto="Te compartimos la ubicación, te esperamos en la ceremonia religiosa y en
      la fiesta de XV años, ¡No faltes!"
  /> -->
  <div id="zigzag">
    <BloqueMapa
      encabezado="Ceremonia"
      dir={quince.data.ceremonia.lugar}
      horario={quince.data.ceremonia.hora}
      lat={quince.data.ceremonia.lat}
      lng={quince.data.ceremonia.lng}
      mapName="mapa1"
    />
    <BloqueMapa
      encabezado="Recepción"
      dir={quince.data.recepcion.lugar}
      horario={quince.data.recepcion.hora}
      lat={quince.data.recepcion.lat}
      lng={quince.data.recepcion.lng}
      mapName="mapa2"
    />
  </div>
</section>

 <!-- Imágenes solitarias condicionales -->
  {
    imagenesSolitarias[1] && (
      <FotoSolitaria
        arriba={false}
        gradientePorciento={40}
        src={imagenesSolitarias[1]}
      />
    )
  }
<section class="grid contenido">
  <Contador fecha={quince.data.fecha.toISOString().split('T')[0]} />
</section>

{
    quince.data.version === "Lux" && (

<section class="grid pantalla">
  <ProgresoInvitados
    email={quince.data.email ?? "nvitacionluxquince@nvitaciones.com"}
    porcentajeMostrarInvitados={(quince.data.progresoPorcentaje ?? 20) as number}
    frase={quince.data.progresoFrase ?? "¡Ya casi completamos la lista de invitados!"}
    mostrarSiempre={quince.data.progresoMostrarSiempre ?? true}
  />
</section>

<Itinerario listado={quince.data.itinerario} />
)
}

<section class="grid pantalla">
  <SilderGsap>
    {galeria && galeria.map((src) => (
      <img src={src} alt={`Galería de ${quince.data.quinceanera || 'XV Años'}`} loading="eager" />
    ))}
  </SilderGsap>
</section>


<section class="grid contenido">

  <Regalos
  tipo={quince.data.tipoRegalos}
  mesas={mesas}
      frase={quince.data.frase_regalos}
      beneficiario={quince.data.beneficiario}
      banco={quince.data.banco}
      cuenta={quince.data.cuenta}
    />
</section>

<section class="grid contenido">
  <MensajeVip />
</section>


    {
      (() => {
        switch (quince.data.version) {
          case 'Lux':
          case 'Clasica':
            return (
              <Confirmacion
                whatsapp={quince.data.whatsapp}
                dias_antes={15}
                version={quince.data.version}
                client:only="react"
/> 
            );
          case 'Esencial':
            return (
             <section>
                  <ConfirmacionBasica
                    whatsapp={quince.data.whatsapp}       
                    client:only="react"
                  />
              </section>
            );
          default:
            return null;
        }
      })()
    }



  <section class="grid contenido">
    <Footer ruta={base} />
  </section>
</Layout>